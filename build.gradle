plugins {
    id 'java'
    id 'com.google.protobuf' version '0.8.8'
    // distribution
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    // ide
    id 'idea'
    id 'eclipse'
    // test coverage
    id 'jacoco'
    // quality
    id 'org.sonarqube' version '2.7'
    // xenon --version reads version from this file
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

version = '3.0.0'
applicationName = 'xenon-grpc'
group = 'nl.esciencecenter.xenon.grpc'
mainClassName = 'nl.esciencecenter.xenon.grpc.XenonServerWrapper'
ext.grpcVersion = '1.20.0'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

ext.xenonLibVersion = '3.0.0'

dependencies {
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:1.2"
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'com.github.xenon-middleware:xenon:de018e54d842c3fbf7f579e3975d41d2f5b598ee'
    // When Xenon v3 is released use jcenter, instead of jitpack builds above
    // implementation group: 'nl.esciencecenter.xenon', name: 'xenon', version: xenonLibVersion
    // implementation group: 'nl.esciencecenter.xenon', name: 'xenon-all', version: xenonLibVersion
    // implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-cloud', version: xenonLibVersion
    // implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-hadoop', version: xenonLibVersion
    // implementation group: 'nl.esciencecenter.xenon.adaptors', name: 'xenon-adaptors-grid', version: xenonLibVersion

    implementation 'net.sourceforge.argparse4j:argparse4j:0.8.1'
    runtimeOnly 'io.netty:netty-tcnative-boringssl-static:2.0.25.Final'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.27.0'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.7.1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

// Inform IntelliJ projects about the generated code. See https://github.com/google/protobuf-gradle-plugin#intellij-idea
idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java")
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc")
    }
}

// use shadow tasks everywhere
distZip.enabled = false
distTar.enabled = false
installDist.enabled = true

jacocoTestReport {
    // Exclude classes of generated source code by protoc
    // See https://stackoverflow.com/questions/29887805/filter-jacoco-coverage-reports-with-gradle
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['nl/esciencecenter/xenon/grpc/XenonProto*',
                                        'nl/esciencecenter/xenon/grpc/*ServiceGrpc*'])
        })
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'xenon-middleware'
        property 'sonar.projectKey', 'xenon-middleware_xenon-grpc'
        property 'sonar.language', 'java'
        property 'sonar.links.homepage', 'https://github.com/xenon-middleware/xenon-grpc'
    }
}

buildConfig {
    appName = project.applicationName
    buildConfigField 'String', 'XENON_LIB_VERSION', "${xenonLibVersion}"
}

shadowJar {
    mergeServiceFiles()
}
