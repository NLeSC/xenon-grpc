syntax = "proto3";

option java_package = "nl.esciencecenter.xenon.grpc";
option java_outer_classname = "XenonProto";

package xenon;

message Empty {

}

message Properties {
    map<string, string> properties = 1;
}

message PropertyDescription {
    string name = 1;
    string description = 2;
    string defaultValue = 3;
    enum Type {
        STRING = 0;
        BOOLEAN = 1;
        INTEGER = 2;
        DOUBLE = 3;
        LONG = 4;
        SIZE = 5;
    }
    Type type = 4;
}

message PropertyDescriptions {
    repeated PropertyDescription properties = 1;
}

message JobAdaptorDescription {
    string name = 1;
    string description = 2;
    repeated string supportedLocations = 3;
    repeated PropertyDescription supportedProperties = 4;
    bool online = 5;
    bool supportsInteractive = 6;
    bool supportsBatch = 7;
    // Which version of scheduler (for example slurm) are supported by adaptor
    repeated string supportedVersions = 8;
}

message JobAdaptorDescriptions {
    repeated JobAdaptorDescription descriptions = 1;
}

message FileAdaptorDescription {
    string name = 1;
    string description = 2;
    repeated string supportedLocations = 3;
    repeated PropertyDescription supportedProperties = 4;
    // copy between remote filesystems directly, without passing bytes through local process
    bool supportsThirdPartyCopy = 5;
}

message FileAdaptorDescriptions {
    repeated FileAdaptorDescription descriptions = 1;
}

message AdaptorName {
    string name = 1;
}

message CertificateCredential {
    string certfilepath = 1;
    string passphrase = 2;
    map<string, string> properties = 3;
}

message PasswordCredential {
    string username = 1;
    string passowrd = 2;
    map<string, string> properties = 3;
}

message NewFileSystemRequest {
    string adaptor = 1;
    string location = 2;
    map<string, string> properties = 3;
    oneof credential {
        CertificateCredential certificate = 4;
        PasswordCredential password = 5;
    }
}

// Handle for Xenon FileSystem object
message FileSystem {
    string id = 1;
    NewFileSystemRequest request = 2;
}

message FileSystems {
    repeated FileSystems filesystems = 1;
}

message Path {
    FileSystem filesystem = 1;
    // In Xenon it is of class RelativePath
    string path = 2;
}

message CopyRequest {
    Path source = 1;
    Path target = 2;
    enum CopyOption {
        CREATE = 0;
        REPLACE = 1;
        IGNORE = 2;
        APPEND = 3;
        RESUME = 4;
        VERIFY = 5;
    }
    repeated CopyOption options = 3;
}

message SourceTarget {
    Path source = 1;
    Path target = 2;
}

message Copy {
    string id = 1;
    CopyRequest request = 2;
}

message CopyStatus {
    Copy copy = 1;
    // Get the number of bytes that have been copied.
    uint64 bytesCopied = 2;
    uint64 bytesToCopy = 3;
    bool done = 4;
    bool running = 5;
    string state = 6;
    string error = 7;
}

message CopyStatuses {
    repeated CopyStatus statuses = 1;
}

enum PosixFilePermission {
    OWNER_READ = 0;
    OWNER_WRITE = 1;
    OWNER_EXECUTE = 2;
    GROUP_READ = 3;
    GROUP_WRITE = 4;
    GROUP_EXECUTE = 5;
    OTHERS_READ = 6;
    OTHERS_WRITE = 7;
    OTHERS_EXECUTE = 8;
}

message FileAttributes {
    uint64 creationTime = 1;
    string group = 2;
    bool isDirectory = 3;
    bool isExecutable = 4;
    bool isHidden = 5;
    bool isOther = 6;
    bool isReadable = 7;
    bool isRegularFile = 8;
    bool isSymbolicLink = 9;
    bool isWritable = 10;
    uint64 lastAccessTime = 11;
    uint64 lastModifiedTime = 12;
    string owner = 13;
    repeated PosixFilePermission permissions = 14;
    uint64 size = 15;
}

message PosixFilePermissionsRequest {
    Path path = 1;
    repeated PosixFilePermission permissions = 2;
}

message FileStream {
    bytes buffer = 1;
}

message WriteRequest {
    Path path = 1;
    bytes buffer = 2;
    enum OpenOption {
        READ = 0;
        WRITE = 1;
        APPEND = 2;
        CREATE = 3;
        OPEN = 4;
        OPEN_OR_CREATE = 5;
        TRUNCATE = 7;
    }
    repeated OpenOption options = 3;
}

message DirectoryStream {
    Path path = 1;
}

message AttributesDirectoryStream {
    Path path = 1;
    FileAttributes attributes = 2;
}

message NewSchedulerRequest {
    string adaptor = 1;
    string location = 2;
    map<string, string> properties = 3;
    oneof credential {
        CertificateCredential certificate = 4;
        PasswordCredential password = 5;
    }
}

// Handle for Xenon Scheduler object
message Scheduler {
    string id = 1;
    NewSchedulerRequest request = 2;
}

message Schedulers {
    repeated Scheduler schedulers = 1;
}

message JobDescription {
    string executable = 1;
    repeated string arguments = 2;
    string workingDirectory = 3;
    map<string, string> environment = 4;
    string queueName = 5;
    bool interactive = 6;
    uint64 maxTime = 7;
    uint32 nodeCount = 8;
    uint32 processesPerNode = 9;
    bool startSingleProcess = 10;
    string stdErr = 11;
    string stdIn = 12;
    string stdOut = 13;
    map<string, string> options = 14;
}

message SubmitJobRequest {
    Scheduler scheduler = 1;
    JobDescription description = 2;
}

message Job {
    string id = 1;
    JobDescription description = 2;
}

message Jobs {
    repeated Job jobs = 1;
}

message Queue {
    string name = 1;
}

message Queues {
    repeated string name = 1;
}

message SchedulerAndQueues {
    Scheduler scheduler = 1;
    repeated Queues queues = 2;
}

message JobStatus {
    string state = 1;
    bool running = 2;
    bool done = 3;
    map<string, string> schedulerSpecificInformation = 4;
    int32 exitCode = 6;
    string errorMessage = 7;
    enum ErrorType {
        Empty = 0;
        NotFound = 1;
        Cancelled = 2;
        SchedulerError = 3;
        SchedulerNotFound = 4;
        Other = 5;
    }
    ErrorType errorType = 8;
    Job job = 9;
}

message JobStatuses {
    repeated JobStatus statuses = 1;
}

message QueueStatus {
    string name = 1;
    Scheduler scheduler = 2;
    map<string, string> schedulerSpecificInformation = 3;
    string error = 4;
}

message QueueStatuses {
    repeated QueueStatus statuses = 1;
}

message JobInputStream {
    Job job = 1;
    bytes stdin = 2;
}

message JobOutputStreams {
    bytes stdout = 1;
    bytes stderr = 2;
}

message Is {
    bool is = 1;
}

// The functionality of the Xenon XenonFactory class
service XenonGlobal {
    // Create a new Xenon instance
    //
    // WATCH OUT!!! Must be called before calling any XenonFiles or XenonJob methods
    // otherwise a Xenon instance is created without properties
    rpc newXenon(Properties) returns (Empty) {}
    rpc getSupportedProperties(Empty) returns (PropertyDescriptions) {}
}

// XenonFactory methods not implemented in grpc
// - endAll(), stop server to end all Xenon instances
// - end(), stop server to end all Xenon instances

// XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
service XenonFiles {
    rpc getAdaptorDescriptions(Empty) returns (FileAdaptorDescriptions) {}
    rpc getAdaptorDescription(AdaptorName) returns (FileAdaptorDescription) {}
    rpc newFileSystem(NewFileSystemRequest) returns (FileSystem) {}
    rpc createDirectories(Path) returns (Empty) {}
    rpc createDirectory(Path) returns (Empty) {}
    rpc createFile(Path) returns (Empty) {}
    // Asynchronous recursive opy
    // in Xenon it is called copy() with CopyOption.ASYNCHRONOUS
    rpc backgroundCopy(CopyRequest) returns (Copy) {}
    rpc cancelCopy(Copy) returns (CopyStatus) {}
    rpc getCopyStatus(Copy) returns (CopyStatus) {}
    // List currently active copy operations
    // Specific to grpc, not part of Xenon library
    rpc listCopyStatuses(Empty) returns (CopyStatuses) {}
    // Synchronous recursive opy
    // in Xenon it is called copy() without CopyOption.ASYNCHRONOUS
    rpc copy(CopyRequest) returns (Empty) {}
    rpc move(SourceTarget) returns (Empty) {}
    rpc delete(Path) returns (Empty) {}
    rpc exists(Path) returns (Empty) {}
    // in Xenon it is called newInputStream()
    rpc read(Path) returns (stream FileStream) {}
    // in Xenon it is called newOutputStream()
    rpc write(stream WriteRequest) returns (Empty) {}
    rpc walkAttributesDirectory(Path) returns (stream AttributesDirectoryStream) {}
    rpc walkDirectory(Path) returns (stream DirectoryStream) {}
    rpc getAttributes(Path) returns (FileAttributes) {}
    rpc setPosixFilePermissions(PosixFilePermissionsRequest) returns (Empty) {}
    rpc readSymbolicLink(Path) returns (Path) {}
    rpc isOpen(FileSystem) returns (Is) {}
    // Closes a filestem, any actions running it with this filestystem will be terminated
    rpc close(FileSystem) returns (Empty) {}
    // List currently created filesystems
    // Specific to grpc, not part of Xenon library
    rpc listFileSystems(Empty) returns (FileSystems) {}
    rpc localFileSystem(Empty) returns (FileSystem) {}
}

// Xenon files methods not implemented in grpc
// - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
// - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
// - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

// The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
service XenonJobs {
    rpc getAdaptorDescriptions(Empty) returns (JobAdaptorDescriptions) {}
    rpc getAdaptorDescription(AdaptorName) returns (JobAdaptorDescription) {}
    rpc newScheduler(NewSchedulerRequest) returns (Scheduler) {}
    rpc submitJob(SubmitJobRequest) returns (Job) {}
    rpc getQueues(Scheduler) returns (Queues) {}
    rpc getDefaultQueueName(Scheduler) returns (Queue) {}
    rpc getJobs(SchedulerAndQueues) returns (Jobs) {}
    rpc getJobStatus(Job) returns (JobStatus) {}
    rpc getJobStatuses(Jobs) returns (JobStatuses) {}
    rpc getQueueStatus(SchedulerAndQueues) returns (QueueStatus) {}
    rpc getQueueStatuses(SchedulerAndQueues) returns (QueueStatuses) {}
    rpc waitUntilDone(Job) returns (JobStatus) {}
    rpc waitUntilRunning(Job) returns (JobStatus) {}
    rpc getStreams(stream JobInputStream) returns (stream JobOutputStreams) {}
    rpc isOpen(Scheduler) returns (Is) {}
    rpc cancelJob(Job) returns (JobStatus) {}
    // Specific to grpc, not part of Xenon library
    rpc deleteJob(Job) returns (Empty) {}
    rpc close(Scheduler) returns (Empty) {}
    // Specific to grpc, not part of Xenon library
    rpc listSchedulers(Empty) returns (Schedulers) {}
    // Specific to grpc, not part of Xenon library
    rpc listJobs(Empty) returns (Jobs) {}
    rpc localScheduler(Empty) returns (Scheduler) {}
}

// Xenon jobs methods not implemented in grpc
// timeout argument of waitUntilDone() and waitUntilRunning(), grpc client has timeout argument