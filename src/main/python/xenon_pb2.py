# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: xenon.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='xenon.proto',
  package='xenon',
  syntax='proto3',
  serialized_pb=_b('\n\x0bxenon.proto\x12\x05xenon\"\x07\n\x05\x45mpty\"v\n\nProperties\x12\x35\n\nproperties\x18\x01 \x03(\x0b\x32!.xenon.Properties.PropertiesEntry\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xcb\x01\n\x13PropertyDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x14\n\x0c\x64\x65\x66\x61ultValue\x18\x03 \x01(\t\x12-\n\x04type\x18\x04 \x01(\x0e\x32\x1f.xenon.PropertyDescription.Type\"L\n\x04Type\x12\n\n\x06STRING\x10\x00\x12\x0b\n\x07\x42OOLEAN\x10\x01\x12\x0b\n\x07INTEGER\x10\x02\x12\n\n\x06\x44OUBLE\x10\x03\x12\x08\n\x04LONG\x10\x04\x12\x08\n\x04SIZE\x10\x05\"F\n\x14PropertyDescriptions\x12.\n\nproperties\x18\x01 \x03(\x0b\x32\x1a.xenon.PropertyDescription\"\xee\x01\n\x15JobAdaptorDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x1a\n\x12supportedLocations\x18\x03 \x03(\t\x12\x37\n\x13supportedProperties\x18\x04 \x03(\x0b\x32\x1a.xenon.PropertyDescription\x12\x0e\n\x06online\x18\x05 \x01(\x08\x12\x1b\n\x13supportsInteractive\x18\x06 \x01(\x08\x12\x15\n\rsupportsBatch\x18\x07 \x01(\x08\x12\x19\n\x11supportedVersions\x18\x08 \x03(\t\"L\n\x16JobAdaptorDescriptions\x12\x32\n\x0c\x64\x65scriptions\x18\x01 \x03(\x0b\x32\x1c.xenon.JobAdaptorDescription\"\xb0\x01\n\x16\x46ileAdaptorDescription\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\x12\x1a\n\x12supportedLocations\x18\x03 \x03(\t\x12\x37\n\x13supportedProperties\x18\x04 \x03(\x0b\x32\x1a.xenon.PropertyDescription\x12\x1e\n\x16supportsThirdPartyCopy\x18\x05 \x01(\x08\"N\n\x17\x46ileAdaptorDescriptions\x12\x33\n\x0c\x64\x65scriptions\x18\x01 \x03(\x0b\x32\x1d.xenon.FileAdaptorDescription\"\x1b\n\x0b\x41\x64\x61ptorName\x12\x0c\n\x04name\x18\x01 \x01(\t\"=\n\x15\x43\x65rtificateCredential\x12\x10\n\x08\x63\x65rtfile\x18\x01 \x01(\t\x12\x12\n\npassphrase\x18\x02 \x01(\t\"8\n\x12PasswordCredential\x12\x10\n\x08username\x18\x01 \x01(\t\x12\x10\n\x08password\x18\x02 \x01(\t\"\x9f\x02\n\x14NewFileSystemRequest\x12\x0f\n\x07\x61\x64\x61ptor\x18\x01 \x01(\t\x12\x10\n\x08location\x18\x02 \x01(\t\x12?\n\nproperties\x18\x03 \x03(\x0b\x32+.xenon.NewFileSystemRequest.PropertiesEntry\x12\x33\n\x0b\x63\x65rtificate\x18\x04 \x01(\x0b\x32\x1c.xenon.CertificateCredentialH\x00\x12-\n\x08password\x18\x05 \x01(\x0b\x32\x19.xenon.PasswordCredentialH\x00\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x0c\n\ncredential\"F\n\nFileSystem\x12\n\n\x02id\x18\x01 \x01(\t\x12,\n\x07request\x18\x02 \x01(\x0b\x32\x1b.xenon.NewFileSystemRequest\"5\n\x0b\x46ileSystems\x12&\n\x0b\x66ilesystems\x18\x01 \x03(\x0b\x32\x11.xenon.FileSystem\";\n\x04Path\x12%\n\nfilesystem\x18\x01 \x01(\x0b\x32\x11.xenon.FileSystem\x12\x0c\n\x04path\x18\x02 \x01(\t\"\xce\x01\n\x0b\x43opyRequest\x12\x1b\n\x06source\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12\x1b\n\x06target\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\x12.\n\x07options\x18\x03 \x03(\x0e\x32\x1d.xenon.CopyRequest.CopyOption\"U\n\nCopyOption\x12\n\n\x06\x43REATE\x10\x00\x12\x0b\n\x07REPLACE\x10\x01\x12\n\n\x06IGNORE\x10\x02\x12\n\n\x06\x41PPEND\x10\x03\x12\n\n\x06RESUME\x10\x04\x12\n\n\x06VERIFY\x10\x05\"H\n\x0cSourceTarget\x12\x1b\n\x06source\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12\x1b\n\x06target\x18\x02 \x01(\x0b\x32\x0b.xenon.Path\"7\n\x04\x43opy\x12\n\n\x02id\x18\x01 \x01(\t\x12#\n\x07request\x18\x02 \x01(\x0b\x32\x12.xenon.CopyRequest\"\x8e\x01\n\nCopyStatus\x12\x19\n\x04\x63opy\x18\x01 \x01(\x0b\x32\x0b.xenon.Copy\x12\x13\n\x0b\x62ytesCopied\x18\x02 \x01(\x04\x12\x13\n\x0b\x62ytesToCopy\x18\x03 \x01(\x04\x12\x0c\n\x04\x64one\x18\x04 \x01(\x08\x12\x0f\n\x07running\x18\x05 \x01(\x08\x12\r\n\x05state\x18\x06 \x01(\t\x12\r\n\x05\x65rror\x18\x07 \x01(\t\"3\n\x0c\x43opyStatuses\x12#\n\x08statuses\x18\x01 \x03(\x0b\x32\x11.xenon.CopyStatus\"\xda\x02\n\x0e\x46ileAttributes\x12\x14\n\x0c\x63reationTime\x18\x01 \x01(\x04\x12\r\n\x05group\x18\x02 \x01(\t\x12\x13\n\x0bisDirectory\x18\x03 \x01(\x08\x12\x14\n\x0cisExecutable\x18\x04 \x01(\x08\x12\x10\n\x08isHidden\x18\x05 \x01(\x08\x12\x0f\n\x07isOther\x18\x06 \x01(\x08\x12\x12\n\nisReadable\x18\x07 \x01(\x08\x12\x15\n\risRegularFile\x18\x08 \x01(\x08\x12\x16\n\x0eisSymbolicLink\x18\t \x01(\x08\x12\x12\n\nisWritable\x18\n \x01(\x08\x12\x16\n\x0elastAccessTime\x18\x0b \x01(\x04\x12\x18\n\x10lastModifiedTime\x18\x0c \x01(\x04\x12\r\n\x05owner\x18\r \x01(\t\x12/\n\x0bpermissions\x18\x0e \x03(\x0e\x32\x1a.xenon.PosixFilePermission\x12\x0c\n\x04size\x18\x0f \x01(\x04\"i\n\x1bPosixFilePermissionsRequest\x12\x19\n\x04path\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12/\n\x0bpermissions\x18\x02 \x03(\x0e\x32\x1a.xenon.PosixFilePermission\"\x1c\n\nFileStream\x12\x0e\n\x06\x62uffer\x18\x01 \x01(\x0c\"\xbc\x01\n\x0cWriteRequest\x12\x19\n\x04path\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12\x0e\n\x06\x62uffer\x18\x02 \x01(\x0c\x12/\n\x07options\x18\x03 \x03(\x0e\x32\x1e.xenon.WriteRequest.OpenOption\"P\n\nOpenOption\x12\n\n\x06\x43REATE\x10\x00\x12\x08\n\x04OPEN\x10\x01\x12\x12\n\x0eOPEN_OR_CREATE\x10\x02\x12\n\n\x06\x41PPEND\x10\x03\x12\x0c\n\x08TRUNCATE\x10\x04\"\x8b\x01\n\x13WalkFileTreeRequest\x12\x1a\n\x05start\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12\x19\n\x11withoutAttributes\x18\x02 \x01(\x08\x12\x10\n\x08maxDepth\x18\x03 \x01(\r\x12\x13\n\x0b\x66ollowLinks\x18\x04 \x01(\x08\x12\x16\n\x0e\x66ilenameRegexp\x18\x05 \x01(\t\"Z\n\x12PathWithAttributes\x12\x19\n\x04path\x18\x01 \x01(\x0b\x32\x0b.xenon.Path\x12)\n\nattributes\x18\x02 \x01(\x0b\x32\x15.xenon.FileAttributes\"\x9d\x02\n\x13NewSchedulerRequest\x12\x0f\n\x07\x61\x64\x61ptor\x18\x01 \x01(\t\x12\x10\n\x08location\x18\x02 \x01(\t\x12>\n\nproperties\x18\x03 \x03(\x0b\x32*.xenon.NewSchedulerRequest.PropertiesEntry\x12\x33\n\x0b\x63\x65rtificate\x18\x04 \x01(\x0b\x32\x1c.xenon.CertificateCredentialH\x00\x12-\n\x08password\x18\x05 \x01(\x0b\x32\x19.xenon.PasswordCredentialH\x00\x1a\x31\n\x0fPropertiesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x42\x0c\n\ncredential\"D\n\tScheduler\x12\n\n\x02id\x18\x01 \x01(\t\x12+\n\x07request\x18\x02 \x01(\x0b\x32\x1a.xenon.NewSchedulerRequest\"2\n\nSchedulers\x12$\n\nschedulers\x18\x01 \x03(\x0b\x32\x10.xenon.Scheduler\"\xfd\x03\n\x0eJobDescription\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x12\n\nexecutable\x18\x02 \x01(\t\x12\x11\n\targuments\x18\x03 \x03(\t\x12\x18\n\x10workingDirectory\x18\x04 \x01(\t\x12;\n\x0b\x65nvironment\x18\x05 \x03(\x0b\x32&.xenon.JobDescription.EnvironmentEntry\x12\x11\n\tqueueName\x18\x06 \x01(\t\x12\x13\n\x0binteractive\x18\x07 \x01(\x08\x12\x0f\n\x07maxTime\x18\x08 \x01(\r\x12\x11\n\tnodeCount\x18\t \x01(\r\x12\x18\n\x10processesPerNode\x18\n \x01(\r\x12\x1a\n\x12startSingleProcess\x18\x0b \x01(\x08\x12\x0e\n\x06stdErr\x18\x0c \x01(\t\x12\r\n\x05stdIn\x18\r \x01(\t\x12\x0e\n\x06stdOut\x18\x0e \x01(\t\x12\x33\n\x07options\x18\x0f \x03(\x0b\x32\".xenon.JobDescription.OptionsEntry\x1a\x32\n\x10\x45nvironmentEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a.\n\x0cOptionsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"c\n\x10SubmitJobRequest\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12*\n\x0b\x64\x65scription\x18\x02 \x01(\x0b\x32\x15.xenon.JobDescription\"=\n\x03Job\x12\n\n\x02id\x18\x01 \x01(\t\x12*\n\x0b\x64\x65scription\x18\x02 \x01(\x0b\x32\x15.xenon.JobDescription\" \n\x04Jobs\x12\x18\n\x04jobs\x18\x01 \x03(\x0b\x32\n.xenon.Job\"\x15\n\x05Queue\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x16\n\x06Queues\x12\x0c\n\x04name\x18\x01 \x03(\t\"I\n\x12SchedulerAndQueues\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\x0e\n\x06queues\x18\x02 \x03(\t\"G\n\x11SchedulerAndQueue\x12#\n\tscheduler\x18\x01 \x01(\x0b\x32\x10.xenon.Scheduler\x12\r\n\x05queue\x18\x02 \x01(\t\"\xb7\x03\n\tJobStatus\x12\r\n\x05state\x18\x01 \x01(\t\x12\x0f\n\x07running\x18\x02 \x01(\x08\x12\x0c\n\x04\x64one\x18\x03 \x01(\x08\x12X\n\x1cschedulerSpecificInformation\x18\x04 \x03(\x0b\x32\x32.xenon.JobStatus.SchedulerSpecificInformationEntry\x12\x10\n\x08\x65xitCode\x18\x06 \x01(\x05\x12\x14\n\x0c\x65rrorMessage\x18\x07 \x01(\t\x12-\n\terrorType\x18\x08 \x01(\x0e\x32\x1a.xenon.JobStatus.ErrorType\x12\x17\n\x03job\x18\t \x01(\x0b\x32\n.xenon.Job\x1a\x43\n!SchedulerSpecificInformationEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"m\n\tErrorType\x12\t\n\x05\x45MPTY\x10\x00\x12\r\n\tNOT_FOUND\x10\x01\x12\r\n\tCANCELLED\x10\x02\x12\x13\n\x0fSCHEDULER_ERROR\x10\x03\x12\x17\n\x13SCHEDULER_NOT_FOUND\x10\x04\x12\t\n\x05OTHER\x10\x05\"1\n\x0bJobStatuses\x12\"\n\x08statuses\x18\x01 \x03(\x0b\x32\x10.xenon.JobStatus\"\xf0\x01\n\x0bQueueStatus\x12\x0c\n\x04name\x18\x01 \x01(\t\x12#\n\tscheduler\x18\x02 \x01(\x0b\x32\x10.xenon.Scheduler\x12Z\n\x1cschedulerSpecificInformation\x18\x03 \x03(\x0b\x32\x34.xenon.QueueStatus.SchedulerSpecificInformationEntry\x12\r\n\x05\x65rror\x18\x04 \x01(\t\x1a\x43\n!SchedulerSpecificInformationEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"5\n\rQueueStatuses\x12$\n\x08statuses\x18\x01 \x03(\x0b\x32\x12.xenon.QueueStatus\"8\n\x0eJobInputStream\x12\x17\n\x03job\x18\x01 \x01(\x0b\x32\n.xenon.Job\x12\r\n\x05stdin\x18\x02 \x01(\x0c\"2\n\x10JobOutputStreams\x12\x0e\n\x06stdout\x18\x01 \x01(\x0c\x12\x0e\n\x06stderr\x18\x02 \x01(\x0c\"\x10\n\x02Is\x12\n\n\x02is\x18\x01 \x01(\x08*\xbe\x01\n\x13PosixFilePermission\x12\x08\n\x04NONE\x10\x00\x12\x0e\n\nOWNER_READ\x10\x01\x12\x0f\n\x0bOWNER_WRITE\x10\x02\x12\x11\n\rOWNER_EXECUTE\x10\x03\x12\x0e\n\nGROUP_READ\x10\x04\x12\x0f\n\x0bGROUP_WRITE\x10\x05\x12\x11\n\rGROUP_EXECUTE\x10\x06\x12\x0f\n\x0bOTHERS_READ\x10\x07\x12\x10\n\x0cOTHERS_WRITE\x10\x08\x12\x12\n\x0eOTHERS_EXECUTE\x10\t2\x83\x01\n\x0bXenonGlobal\x12-\n\x08newXenon\x12\x11.xenon.Properties\x1a\x0c.xenon.Empty\"\x00\x12\x45\n\x16getSupportedProperties\x12\x0c.xenon.Empty\x1a\x1b.xenon.PropertyDescriptions\"\x00\x32\xde\n\n\nXenonFiles\x12H\n\x16getAdaptorDescriptions\x12\x0c.xenon.Empty\x1a\x1e.xenon.FileAdaptorDescriptions\"\x00\x12L\n\x15getAdaptorDescription\x12\x12.xenon.AdaptorName\x1a\x1d.xenon.FileAdaptorDescription\"\x00\x12\x41\n\rnewFileSystem\x12\x1b.xenon.NewFileSystemRequest\x1a\x11.xenon.FileSystem\"\x00\x12\x30\n\x11\x63reateDirectories\x12\x0b.xenon.Path\x1a\x0c.xenon.Empty\"\x00\x12.\n\x0f\x63reateDirectory\x12\x0b.xenon.Path\x1a\x0c.xenon.Empty\"\x00\x12)\n\ncreateFile\x12\x0b.xenon.Path\x1a\x0c.xenon.Empty\"\x00\x12\x33\n\x0e\x62\x61\x63kgroundCopy\x12\x12.xenon.CopyRequest\x1a\x0b.xenon.Copy\"\x00\x12\x38\n\x14\x63\x61ncelBackgroundCopy\x12\x0b.xenon.Copy\x1a\x11.xenon.CopyStatus\"\x00\x12;\n\x17getBackgroundCopyStatus\x12\x0b.xenon.Copy\x1a\x11.xenon.CopyStatus\"\x00\x12\x41\n\x1alistBackgroundCopyStatuses\x12\x0c.xenon.Empty\x1a\x13.xenon.CopyStatuses\"\x00\x12\x33\n\x14\x64\x65leteBackgroundCopy\x12\x0b.xenon.Copy\x1a\x0c.xenon.Empty\"\x00\x12*\n\x04\x63opy\x12\x12.xenon.CopyRequest\x1a\x0c.xenon.Empty\"\x00\x12+\n\x04move\x12\x13.xenon.SourceTarget\x1a\x0c.xenon.Empty\"\x00\x12%\n\x06\x64\x65lete\x12\x0b.xenon.Path\x1a\x0c.xenon.Empty\"\x00\x12\"\n\x06\x65xists\x12\x0b.xenon.Path\x1a\t.xenon.Is\"\x00\x12*\n\x04read\x12\x0b.xenon.Path\x1a\x11.xenon.FileStream\"\x00\x30\x01\x12.\n\x05write\x12\x13.xenon.WriteRequest\x1a\x0c.xenon.Empty\"\x00(\x01\x12I\n\x0cwalkFileTree\x12\x1a.xenon.WalkFileTreeRequest\x1a\x19.xenon.PathWithAttributes\"\x00\x30\x01\x12\x35\n\rgetAttributes\x12\x0b.xenon.Path\x1a\x15.xenon.FileAttributes\"\x00\x12M\n\x17setPosixFilePermissions\x12\".xenon.PosixFilePermissionsRequest\x1a\x0c.xenon.Empty\"\x00\x12.\n\x10readSymbolicLink\x12\x0b.xenon.Path\x1a\x0b.xenon.Path\"\x00\x12(\n\x06isOpen\x12\x11.xenon.FileSystem\x1a\t.xenon.Is\"\x00\x12*\n\x05\x63lose\x12\x11.xenon.FileSystem\x1a\x0c.xenon.Empty\"\x00\x12\x35\n\x0flistFileSystems\x12\x0c.xenon.Empty\x1a\x12.xenon.FileSystems\"\x00\x12\x36\n\x10localFileSystems\x12\x0c.xenon.Empty\x1a\x12.xenon.FileSystems\"\x00\x32\x86\t\n\tXenonJobs\x12G\n\x16getAdaptorDescriptions\x12\x0c.xenon.Empty\x1a\x1d.xenon.JobAdaptorDescriptions\"\x00\x12K\n\x15getAdaptorDescription\x12\x12.xenon.AdaptorName\x1a\x1c.xenon.JobAdaptorDescription\"\x00\x12>\n\x0cnewScheduler\x12\x1a.xenon.NewSchedulerRequest\x1a\x10.xenon.Scheduler\"\x00\x12\x32\n\tsubmitJob\x12\x17.xenon.SubmitJobRequest\x1a\n.xenon.Job\"\x00\x12.\n\tgetQueues\x12\x10.xenon.Scheduler\x1a\r.xenon.Queues\"\x00\x12\x37\n\x13getDefaultQueueName\x12\x10.xenon.Scheduler\x1a\x0c.xenon.Queue\"\x00\x12\x33\n\x07getJobs\x12\x19.xenon.SchedulerAndQueues\x1a\x0b.xenon.Jobs\"\x00\x12.\n\x0cgetJobStatus\x12\n.xenon.Job\x1a\x10.xenon.JobStatus\"\x00\x12\x33\n\x0egetJobStatuses\x12\x0b.xenon.Jobs\x1a\x12.xenon.JobStatuses\"\x00\x12@\n\x0egetQueueStatus\x12\x18.xenon.SchedulerAndQueue\x1a\x12.xenon.QueueStatus\"\x00\x12\x45\n\x10getQueueStatuses\x12\x19.xenon.SchedulerAndQueues\x1a\x14.xenon.QueueStatuses\"\x00\x12/\n\rwaitUntilDone\x12\n.xenon.Job\x1a\x10.xenon.JobStatus\"\x00\x12\x32\n\x10waitUntilRunning\x12\n.xenon.Job\x1a\x10.xenon.JobStatus\"\x00\x12\x42\n\ngetStreams\x12\x15.xenon.JobInputStream\x1a\x17.xenon.JobOutputStreams\"\x00(\x01\x30\x01\x12\'\n\x06isOpen\x12\x10.xenon.Scheduler\x1a\t.xenon.Is\"\x00\x12+\n\tcancelJob\x12\n.xenon.Job\x1a\x10.xenon.JobStatus\"\x00\x12\'\n\tdeleteJob\x12\n.xenon.Job\x1a\x0c.xenon.Empty\"\x00\x12)\n\x05\x63lose\x12\x10.xenon.Scheduler\x1a\x0c.xenon.Empty\"\x00\x12\x33\n\x0elistSchedulers\x12\x0c.xenon.Empty\x1a\x11.xenon.Schedulers\"\x00\x12\'\n\x08listJobs\x12\x0c.xenon.Empty\x1a\x0b.xenon.Jobs\"\x00\x12\x32\n\x0elocalScheduler\x12\x0c.xenon.Empty\x1a\x10.xenon.Scheduler\"\x00\x42*\n\x1cnl.esciencecenter.xenon.grpcB\nXenonProtob\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_POSIXFILEPERMISSION = _descriptor.EnumDescriptor(
  name='PosixFilePermission',
  full_name='xenon.PosixFilePermission',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NONE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_READ', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_WRITE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OWNER_EXECUTE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_READ', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_WRITE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GROUP_EXECUTE', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_READ', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_WRITE', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHERS_EXECUTE', index=9, number=9,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=5319,
  serialized_end=5509,
)
_sym_db.RegisterEnumDescriptor(_POSIXFILEPERMISSION)

PosixFilePermission = enum_type_wrapper.EnumTypeWrapper(_POSIXFILEPERMISSION)
NONE = 0
OWNER_READ = 1
OWNER_WRITE = 2
OWNER_EXECUTE = 3
GROUP_READ = 4
GROUP_WRITE = 5
GROUP_EXECUTE = 6
OTHERS_READ = 7
OTHERS_WRITE = 8
OTHERS_EXECUTE = 9


_PROPERTYDESCRIPTION_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='xenon.PropertyDescription.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='STRING', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BOOLEAN', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='INTEGER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DOUBLE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LONG', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SIZE', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=279,
  serialized_end=355,
)
_sym_db.RegisterEnumDescriptor(_PROPERTYDESCRIPTION_TYPE)

_COPYREQUEST_COPYOPTION = _descriptor.EnumDescriptor(
  name='CopyOption',
  full_name='xenon.CopyRequest.CopyOption',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CREATE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REPLACE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='IGNORE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPEND', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='RESUME', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VERIFY', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1757,
  serialized_end=1842,
)
_sym_db.RegisterEnumDescriptor(_COPYREQUEST_COPYOPTION)

_WRITEREQUEST_OPENOPTION = _descriptor.EnumDescriptor(
  name='OpenOption',
  full_name='xenon.WriteRequest.OpenOption',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='CREATE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPEN', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OPEN_OR_CREATE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='APPEND', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TRUNCATE', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2768,
  serialized_end=2848,
)
_sym_db.RegisterEnumDescriptor(_WRITEREQUEST_OPENOPTION)

_JOBSTATUS_ERRORTYPE = _descriptor.EnumDescriptor(
  name='ErrorType',
  full_name='xenon.JobStatus.ErrorType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='EMPTY', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CANCELLED', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SCHEDULER_ERROR', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SCHEDULER_NOT_FOUND', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OTHER', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4730,
  serialized_end=4839,
)
_sym_db.RegisterEnumDescriptor(_JOBSTATUS_ERRORTYPE)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='xenon.Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=29,
)


_PROPERTIES_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.Properties.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.Properties.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.Properties.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=100,
  serialized_end=149,
)

_PROPERTIES = _descriptor.Descriptor(
  name='Properties',
  full_name='xenon.Properties',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.Properties.properties', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_PROPERTIES_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=31,
  serialized_end=149,
)


_PROPERTYDESCRIPTION = _descriptor.Descriptor(
  name='PropertyDescription',
  full_name='xenon.PropertyDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.PropertyDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.PropertyDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='defaultValue', full_name='xenon.PropertyDescription.defaultValue', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='xenon.PropertyDescription.type', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _PROPERTYDESCRIPTION_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=152,
  serialized_end=355,
)


_PROPERTYDESCRIPTIONS = _descriptor.Descriptor(
  name='PropertyDescriptions',
  full_name='xenon.PropertyDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.PropertyDescriptions.properties', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=357,
  serialized_end=427,
)


_JOBADAPTORDESCRIPTION = _descriptor.Descriptor(
  name='JobAdaptorDescription',
  full_name='xenon.JobAdaptorDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.JobAdaptorDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.JobAdaptorDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportedLocations', full_name='xenon.JobAdaptorDescription.supportedLocations', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportedProperties', full_name='xenon.JobAdaptorDescription.supportedProperties', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='online', full_name='xenon.JobAdaptorDescription.online', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportsInteractive', full_name='xenon.JobAdaptorDescription.supportsInteractive', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportsBatch', full_name='xenon.JobAdaptorDescription.supportsBatch', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportedVersions', full_name='xenon.JobAdaptorDescription.supportedVersions', index=7,
      number=8, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=430,
  serialized_end=668,
)


_JOBADAPTORDESCRIPTIONS = _descriptor.Descriptor(
  name='JobAdaptorDescriptions',
  full_name='xenon.JobAdaptorDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='descriptions', full_name='xenon.JobAdaptorDescriptions.descriptions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=670,
  serialized_end=746,
)


_FILEADAPTORDESCRIPTION = _descriptor.Descriptor(
  name='FileAdaptorDescription',
  full_name='xenon.FileAdaptorDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.FileAdaptorDescription.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.FileAdaptorDescription.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportedLocations', full_name='xenon.FileAdaptorDescription.supportedLocations', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportedProperties', full_name='xenon.FileAdaptorDescription.supportedProperties', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='supportsThirdPartyCopy', full_name='xenon.FileAdaptorDescription.supportsThirdPartyCopy', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=749,
  serialized_end=925,
)


_FILEADAPTORDESCRIPTIONS = _descriptor.Descriptor(
  name='FileAdaptorDescriptions',
  full_name='xenon.FileAdaptorDescriptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='descriptions', full_name='xenon.FileAdaptorDescriptions.descriptions', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=927,
  serialized_end=1005,
)


_ADAPTORNAME = _descriptor.Descriptor(
  name='AdaptorName',
  full_name='xenon.AdaptorName',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.AdaptorName.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1007,
  serialized_end=1034,
)


_CERTIFICATECREDENTIAL = _descriptor.Descriptor(
  name='CertificateCredential',
  full_name='xenon.CertificateCredential',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='certfile', full_name='xenon.CertificateCredential.certfile', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='passphrase', full_name='xenon.CertificateCredential.passphrase', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1036,
  serialized_end=1097,
)


_PASSWORDCREDENTIAL = _descriptor.Descriptor(
  name='PasswordCredential',
  full_name='xenon.PasswordCredential',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='username', full_name='xenon.PasswordCredential.username', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='xenon.PasswordCredential.password', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1099,
  serialized_end=1155,
)


_NEWFILESYSTEMREQUEST_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.NewFileSystemRequest.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.NewFileSystemRequest.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.NewFileSystemRequest.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=100,
  serialized_end=149,
)

_NEWFILESYSTEMREQUEST = _descriptor.Descriptor(
  name='NewFileSystemRequest',
  full_name='xenon.NewFileSystemRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='adaptor', full_name='xenon.NewFileSystemRequest.adaptor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='location', full_name='xenon.NewFileSystemRequest.location', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.NewFileSystemRequest.properties', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate', full_name='xenon.NewFileSystemRequest.certificate', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='xenon.NewFileSystemRequest.password', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_NEWFILESYSTEMREQUEST_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='credential', full_name='xenon.NewFileSystemRequest.credential',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1158,
  serialized_end=1445,
)


_FILESYSTEM = _descriptor.Descriptor(
  name='FileSystem',
  full_name='xenon.FileSystem',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.FileSystem.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='request', full_name='xenon.FileSystem.request', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1447,
  serialized_end=1517,
)


_FILESYSTEMS = _descriptor.Descriptor(
  name='FileSystems',
  full_name='xenon.FileSystems',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystems', full_name='xenon.FileSystems.filesystems', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1519,
  serialized_end=1572,
)


_PATH = _descriptor.Descriptor(
  name='Path',
  full_name='xenon.Path',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='filesystem', full_name='xenon.Path.filesystem', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.Path.path', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1574,
  serialized_end=1633,
)


_COPYREQUEST = _descriptor.Descriptor(
  name='CopyRequest',
  full_name='xenon.CopyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='source', full_name='xenon.CopyRequest.source', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target', full_name='xenon.CopyRequest.target', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='xenon.CopyRequest.options', index=2,
      number=3, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _COPYREQUEST_COPYOPTION,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1636,
  serialized_end=1842,
)


_SOURCETARGET = _descriptor.Descriptor(
  name='SourceTarget',
  full_name='xenon.SourceTarget',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='source', full_name='xenon.SourceTarget.source', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='target', full_name='xenon.SourceTarget.target', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1844,
  serialized_end=1916,
)


_COPY = _descriptor.Descriptor(
  name='Copy',
  full_name='xenon.Copy',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.Copy.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='request', full_name='xenon.Copy.request', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1918,
  serialized_end=1973,
)


_COPYSTATUS = _descriptor.Descriptor(
  name='CopyStatus',
  full_name='xenon.CopyStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='copy', full_name='xenon.CopyStatus.copy', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytesCopied', full_name='xenon.CopyStatus.bytesCopied', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='bytesToCopy', full_name='xenon.CopyStatus.bytesToCopy', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='done', full_name='xenon.CopyStatus.done', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='running', full_name='xenon.CopyStatus.running', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='xenon.CopyStatus.state', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error', full_name='xenon.CopyStatus.error', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1976,
  serialized_end=2118,
)


_COPYSTATUSES = _descriptor.Descriptor(
  name='CopyStatuses',
  full_name='xenon.CopyStatuses',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statuses', full_name='xenon.CopyStatuses.statuses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2120,
  serialized_end=2171,
)


_FILEATTRIBUTES = _descriptor.Descriptor(
  name='FileAttributes',
  full_name='xenon.FileAttributes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='creationTime', full_name='xenon.FileAttributes.creationTime', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='group', full_name='xenon.FileAttributes.group', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isDirectory', full_name='xenon.FileAttributes.isDirectory', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isExecutable', full_name='xenon.FileAttributes.isExecutable', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isHidden', full_name='xenon.FileAttributes.isHidden', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isOther', full_name='xenon.FileAttributes.isOther', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isReadable', full_name='xenon.FileAttributes.isReadable', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isRegularFile', full_name='xenon.FileAttributes.isRegularFile', index=7,
      number=8, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isSymbolicLink', full_name='xenon.FileAttributes.isSymbolicLink', index=8,
      number=9, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='isWritable', full_name='xenon.FileAttributes.isWritable', index=9,
      number=10, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lastAccessTime', full_name='xenon.FileAttributes.lastAccessTime', index=10,
      number=11, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='lastModifiedTime', full_name='xenon.FileAttributes.lastModifiedTime', index=11,
      number=12, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='owner', full_name='xenon.FileAttributes.owner', index=12,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='permissions', full_name='xenon.FileAttributes.permissions', index=13,
      number=14, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size', full_name='xenon.FileAttributes.size', index=14,
      number=15, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2174,
  serialized_end=2520,
)


_POSIXFILEPERMISSIONSREQUEST = _descriptor.Descriptor(
  name='PosixFilePermissionsRequest',
  full_name='xenon.PosixFilePermissionsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.PosixFilePermissionsRequest.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='permissions', full_name='xenon.PosixFilePermissionsRequest.permissions', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2522,
  serialized_end=2627,
)


_FILESTREAM = _descriptor.Descriptor(
  name='FileStream',
  full_name='xenon.FileStream',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='buffer', full_name='xenon.FileStream.buffer', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2629,
  serialized_end=2657,
)


_WRITEREQUEST = _descriptor.Descriptor(
  name='WriteRequest',
  full_name='xenon.WriteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.WriteRequest.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='buffer', full_name='xenon.WriteRequest.buffer', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='xenon.WriteRequest.options', index=2,
      number=3, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _WRITEREQUEST_OPENOPTION,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2660,
  serialized_end=2848,
)


_WALKFILETREEREQUEST = _descriptor.Descriptor(
  name='WalkFileTreeRequest',
  full_name='xenon.WalkFileTreeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start', full_name='xenon.WalkFileTreeRequest.start', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='withoutAttributes', full_name='xenon.WalkFileTreeRequest.withoutAttributes', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='maxDepth', full_name='xenon.WalkFileTreeRequest.maxDepth', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='followLinks', full_name='xenon.WalkFileTreeRequest.followLinks', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filenameRegexp', full_name='xenon.WalkFileTreeRequest.filenameRegexp', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2851,
  serialized_end=2990,
)


_PATHWITHATTRIBUTES = _descriptor.Descriptor(
  name='PathWithAttributes',
  full_name='xenon.PathWithAttributes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='xenon.PathWithAttributes.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='attributes', full_name='xenon.PathWithAttributes.attributes', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2992,
  serialized_end=3082,
)


_NEWSCHEDULERREQUEST_PROPERTIESENTRY = _descriptor.Descriptor(
  name='PropertiesEntry',
  full_name='xenon.NewSchedulerRequest.PropertiesEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.NewSchedulerRequest.PropertiesEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.NewSchedulerRequest.PropertiesEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=100,
  serialized_end=149,
)

_NEWSCHEDULERREQUEST = _descriptor.Descriptor(
  name='NewSchedulerRequest',
  full_name='xenon.NewSchedulerRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='adaptor', full_name='xenon.NewSchedulerRequest.adaptor', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='location', full_name='xenon.NewSchedulerRequest.location', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='properties', full_name='xenon.NewSchedulerRequest.properties', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='certificate', full_name='xenon.NewSchedulerRequest.certificate', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='password', full_name='xenon.NewSchedulerRequest.password', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_NEWSCHEDULERREQUEST_PROPERTIESENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='credential', full_name='xenon.NewSchedulerRequest.credential',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3085,
  serialized_end=3370,
)


_SCHEDULER = _descriptor.Descriptor(
  name='Scheduler',
  full_name='xenon.Scheduler',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.Scheduler.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='request', full_name='xenon.Scheduler.request', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3372,
  serialized_end=3440,
)


_SCHEDULERS = _descriptor.Descriptor(
  name='Schedulers',
  full_name='xenon.Schedulers',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='schedulers', full_name='xenon.Schedulers.schedulers', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3442,
  serialized_end=3492,
)


_JOBDESCRIPTION_ENVIRONMENTENTRY = _descriptor.Descriptor(
  name='EnvironmentEntry',
  full_name='xenon.JobDescription.EnvironmentEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobDescription.EnvironmentEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobDescription.EnvironmentEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3906,
  serialized_end=3956,
)

_JOBDESCRIPTION_OPTIONSENTRY = _descriptor.Descriptor(
  name='OptionsEntry',
  full_name='xenon.JobDescription.OptionsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobDescription.OptionsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobDescription.OptionsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3958,
  serialized_end=4004,
)

_JOBDESCRIPTION = _descriptor.Descriptor(
  name='JobDescription',
  full_name='xenon.JobDescription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.JobDescription.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='executable', full_name='xenon.JobDescription.executable', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='arguments', full_name='xenon.JobDescription.arguments', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='workingDirectory', full_name='xenon.JobDescription.workingDirectory', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='environment', full_name='xenon.JobDescription.environment', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queueName', full_name='xenon.JobDescription.queueName', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='interactive', full_name='xenon.JobDescription.interactive', index=6,
      number=7, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='maxTime', full_name='xenon.JobDescription.maxTime', index=7,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='nodeCount', full_name='xenon.JobDescription.nodeCount', index=8,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='processesPerNode', full_name='xenon.JobDescription.processesPerNode', index=9,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='startSingleProcess', full_name='xenon.JobDescription.startSingleProcess', index=10,
      number=11, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdErr', full_name='xenon.JobDescription.stdErr', index=11,
      number=12, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdIn', full_name='xenon.JobDescription.stdIn', index=12,
      number=13, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdOut', full_name='xenon.JobDescription.stdOut', index=13,
      number=14, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='xenon.JobDescription.options', index=14,
      number=15, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_JOBDESCRIPTION_ENVIRONMENTENTRY, _JOBDESCRIPTION_OPTIONSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3495,
  serialized_end=4004,
)


_SUBMITJOBREQUEST = _descriptor.Descriptor(
  name='SubmitJobRequest',
  full_name='xenon.SubmitJobRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SubmitJobRequest.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.SubmitJobRequest.description', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4006,
  serialized_end=4105,
)


_JOB = _descriptor.Descriptor(
  name='Job',
  full_name='xenon.Job',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='xenon.Job.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='xenon.Job.description', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4107,
  serialized_end=4168,
)


_JOBS = _descriptor.Descriptor(
  name='Jobs',
  full_name='xenon.Jobs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='jobs', full_name='xenon.Jobs.jobs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4170,
  serialized_end=4202,
)


_QUEUE = _descriptor.Descriptor(
  name='Queue',
  full_name='xenon.Queue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.Queue.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4204,
  serialized_end=4225,
)


_QUEUES = _descriptor.Descriptor(
  name='Queues',
  full_name='xenon.Queues',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.Queues.name', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4227,
  serialized_end=4249,
)


_SCHEDULERANDQUEUES = _descriptor.Descriptor(
  name='SchedulerAndQueues',
  full_name='xenon.SchedulerAndQueues',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SchedulerAndQueues.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queues', full_name='xenon.SchedulerAndQueues.queues', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4251,
  serialized_end=4324,
)


_SCHEDULERANDQUEUE = _descriptor.Descriptor(
  name='SchedulerAndQueue',
  full_name='xenon.SchedulerAndQueue',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.SchedulerAndQueue.scheduler', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='queue', full_name='xenon.SchedulerAndQueue.queue', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4326,
  serialized_end=4397,
)


_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY = _descriptor.Descriptor(
  name='SchedulerSpecificInformationEntry',
  full_name='xenon.JobStatus.SchedulerSpecificInformationEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.JobStatus.SchedulerSpecificInformationEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.JobStatus.SchedulerSpecificInformationEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4661,
  serialized_end=4728,
)

_JOBSTATUS = _descriptor.Descriptor(
  name='JobStatus',
  full_name='xenon.JobStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='xenon.JobStatus.state', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='running', full_name='xenon.JobStatus.running', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='done', full_name='xenon.JobStatus.done', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='schedulerSpecificInformation', full_name='xenon.JobStatus.schedulerSpecificInformation', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='exitCode', full_name='xenon.JobStatus.exitCode', index=4,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='errorMessage', full_name='xenon.JobStatus.errorMessage', index=5,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='errorType', full_name='xenon.JobStatus.errorType', index=6,
      number=8, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.JobStatus.job', index=7,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY, ],
  enum_types=[
    _JOBSTATUS_ERRORTYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4400,
  serialized_end=4839,
)


_JOBSTATUSES = _descriptor.Descriptor(
  name='JobStatuses',
  full_name='xenon.JobStatuses',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statuses', full_name='xenon.JobStatuses.statuses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4841,
  serialized_end=4890,
)


_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY = _descriptor.Descriptor(
  name='SchedulerSpecificInformationEntry',
  full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='xenon.QueueStatus.SchedulerSpecificInformationEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4661,
  serialized_end=4728,
)

_QUEUESTATUS = _descriptor.Descriptor(
  name='QueueStatus',
  full_name='xenon.QueueStatus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='xenon.QueueStatus.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scheduler', full_name='xenon.QueueStatus.scheduler', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='schedulerSpecificInformation', full_name='xenon.QueueStatus.schedulerSpecificInformation', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error', full_name='xenon.QueueStatus.error', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4893,
  serialized_end=5133,
)


_QUEUESTATUSES = _descriptor.Descriptor(
  name='QueueStatuses',
  full_name='xenon.QueueStatuses',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='statuses', full_name='xenon.QueueStatuses.statuses', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5135,
  serialized_end=5188,
)


_JOBINPUTSTREAM = _descriptor.Descriptor(
  name='JobInputStream',
  full_name='xenon.JobInputStream',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='job', full_name='xenon.JobInputStream.job', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stdin', full_name='xenon.JobInputStream.stdin', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5190,
  serialized_end=5246,
)


_JOBOUTPUTSTREAMS = _descriptor.Descriptor(
  name='JobOutputStreams',
  full_name='xenon.JobOutputStreams',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stdout', full_name='xenon.JobOutputStreams.stdout', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stderr', full_name='xenon.JobOutputStreams.stderr', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5248,
  serialized_end=5298,
)


_IS = _descriptor.Descriptor(
  name='Is',
  full_name='xenon.Is',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='is', full_name='xenon.Is.is', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=5300,
  serialized_end=5316,
)

_PROPERTIES_PROPERTIESENTRY.containing_type = _PROPERTIES
_PROPERTIES.fields_by_name['properties'].message_type = _PROPERTIES_PROPERTIESENTRY
_PROPERTYDESCRIPTION.fields_by_name['type'].enum_type = _PROPERTYDESCRIPTION_TYPE
_PROPERTYDESCRIPTION_TYPE.containing_type = _PROPERTYDESCRIPTION
_PROPERTYDESCRIPTIONS.fields_by_name['properties'].message_type = _PROPERTYDESCRIPTION
_JOBADAPTORDESCRIPTION.fields_by_name['supportedProperties'].message_type = _PROPERTYDESCRIPTION
_JOBADAPTORDESCRIPTIONS.fields_by_name['descriptions'].message_type = _JOBADAPTORDESCRIPTION
_FILEADAPTORDESCRIPTION.fields_by_name['supportedProperties'].message_type = _PROPERTYDESCRIPTION
_FILEADAPTORDESCRIPTIONS.fields_by_name['descriptions'].message_type = _FILEADAPTORDESCRIPTION
_NEWFILESYSTEMREQUEST_PROPERTIESENTRY.containing_type = _NEWFILESYSTEMREQUEST
_NEWFILESYSTEMREQUEST.fields_by_name['properties'].message_type = _NEWFILESYSTEMREQUEST_PROPERTIESENTRY
_NEWFILESYSTEMREQUEST.fields_by_name['certificate'].message_type = _CERTIFICATECREDENTIAL
_NEWFILESYSTEMREQUEST.fields_by_name['password'].message_type = _PASSWORDCREDENTIAL
_NEWFILESYSTEMREQUEST.oneofs_by_name['credential'].fields.append(
  _NEWFILESYSTEMREQUEST.fields_by_name['certificate'])
_NEWFILESYSTEMREQUEST.fields_by_name['certificate'].containing_oneof = _NEWFILESYSTEMREQUEST.oneofs_by_name['credential']
_NEWFILESYSTEMREQUEST.oneofs_by_name['credential'].fields.append(
  _NEWFILESYSTEMREQUEST.fields_by_name['password'])
_NEWFILESYSTEMREQUEST.fields_by_name['password'].containing_oneof = _NEWFILESYSTEMREQUEST.oneofs_by_name['credential']
_FILESYSTEM.fields_by_name['request'].message_type = _NEWFILESYSTEMREQUEST
_FILESYSTEMS.fields_by_name['filesystems'].message_type = _FILESYSTEM
_PATH.fields_by_name['filesystem'].message_type = _FILESYSTEM
_COPYREQUEST.fields_by_name['source'].message_type = _PATH
_COPYREQUEST.fields_by_name['target'].message_type = _PATH
_COPYREQUEST.fields_by_name['options'].enum_type = _COPYREQUEST_COPYOPTION
_COPYREQUEST_COPYOPTION.containing_type = _COPYREQUEST
_SOURCETARGET.fields_by_name['source'].message_type = _PATH
_SOURCETARGET.fields_by_name['target'].message_type = _PATH
_COPY.fields_by_name['request'].message_type = _COPYREQUEST
_COPYSTATUS.fields_by_name['copy'].message_type = _COPY
_COPYSTATUSES.fields_by_name['statuses'].message_type = _COPYSTATUS
_FILEATTRIBUTES.fields_by_name['permissions'].enum_type = _POSIXFILEPERMISSION
_POSIXFILEPERMISSIONSREQUEST.fields_by_name['path'].message_type = _PATH
_POSIXFILEPERMISSIONSREQUEST.fields_by_name['permissions'].enum_type = _POSIXFILEPERMISSION
_WRITEREQUEST.fields_by_name['path'].message_type = _PATH
_WRITEREQUEST.fields_by_name['options'].enum_type = _WRITEREQUEST_OPENOPTION
_WRITEREQUEST_OPENOPTION.containing_type = _WRITEREQUEST
_WALKFILETREEREQUEST.fields_by_name['start'].message_type = _PATH
_PATHWITHATTRIBUTES.fields_by_name['path'].message_type = _PATH
_PATHWITHATTRIBUTES.fields_by_name['attributes'].message_type = _FILEATTRIBUTES
_NEWSCHEDULERREQUEST_PROPERTIESENTRY.containing_type = _NEWSCHEDULERREQUEST
_NEWSCHEDULERREQUEST.fields_by_name['properties'].message_type = _NEWSCHEDULERREQUEST_PROPERTIESENTRY
_NEWSCHEDULERREQUEST.fields_by_name['certificate'].message_type = _CERTIFICATECREDENTIAL
_NEWSCHEDULERREQUEST.fields_by_name['password'].message_type = _PASSWORDCREDENTIAL
_NEWSCHEDULERREQUEST.oneofs_by_name['credential'].fields.append(
  _NEWSCHEDULERREQUEST.fields_by_name['certificate'])
_NEWSCHEDULERREQUEST.fields_by_name['certificate'].containing_oneof = _NEWSCHEDULERREQUEST.oneofs_by_name['credential']
_NEWSCHEDULERREQUEST.oneofs_by_name['credential'].fields.append(
  _NEWSCHEDULERREQUEST.fields_by_name['password'])
_NEWSCHEDULERREQUEST.fields_by_name['password'].containing_oneof = _NEWSCHEDULERREQUEST.oneofs_by_name['credential']
_SCHEDULER.fields_by_name['request'].message_type = _NEWSCHEDULERREQUEST
_SCHEDULERS.fields_by_name['schedulers'].message_type = _SCHEDULER
_JOBDESCRIPTION_ENVIRONMENTENTRY.containing_type = _JOBDESCRIPTION
_JOBDESCRIPTION_OPTIONSENTRY.containing_type = _JOBDESCRIPTION
_JOBDESCRIPTION.fields_by_name['scheduler'].message_type = _SCHEDULER
_JOBDESCRIPTION.fields_by_name['environment'].message_type = _JOBDESCRIPTION_ENVIRONMENTENTRY
_JOBDESCRIPTION.fields_by_name['options'].message_type = _JOBDESCRIPTION_OPTIONSENTRY
_SUBMITJOBREQUEST.fields_by_name['scheduler'].message_type = _SCHEDULER
_SUBMITJOBREQUEST.fields_by_name['description'].message_type = _JOBDESCRIPTION
_JOB.fields_by_name['description'].message_type = _JOBDESCRIPTION
_JOBS.fields_by_name['jobs'].message_type = _JOB
_SCHEDULERANDQUEUES.fields_by_name['scheduler'].message_type = _SCHEDULER
_SCHEDULERANDQUEUE.fields_by_name['scheduler'].message_type = _SCHEDULER
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.containing_type = _JOBSTATUS
_JOBSTATUS.fields_by_name['schedulerSpecificInformation'].message_type = _JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY
_JOBSTATUS.fields_by_name['errorType'].enum_type = _JOBSTATUS_ERRORTYPE
_JOBSTATUS.fields_by_name['job'].message_type = _JOB
_JOBSTATUS_ERRORTYPE.containing_type = _JOBSTATUS
_JOBSTATUSES.fields_by_name['statuses'].message_type = _JOBSTATUS
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.containing_type = _QUEUESTATUS
_QUEUESTATUS.fields_by_name['scheduler'].message_type = _SCHEDULER
_QUEUESTATUS.fields_by_name['schedulerSpecificInformation'].message_type = _QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY
_QUEUESTATUSES.fields_by_name['statuses'].message_type = _QUEUESTATUS
_JOBINPUTSTREAM.fields_by_name['job'].message_type = _JOB
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['Properties'] = _PROPERTIES
DESCRIPTOR.message_types_by_name['PropertyDescription'] = _PROPERTYDESCRIPTION
DESCRIPTOR.message_types_by_name['PropertyDescriptions'] = _PROPERTYDESCRIPTIONS
DESCRIPTOR.message_types_by_name['JobAdaptorDescription'] = _JOBADAPTORDESCRIPTION
DESCRIPTOR.message_types_by_name['JobAdaptorDescriptions'] = _JOBADAPTORDESCRIPTIONS
DESCRIPTOR.message_types_by_name['FileAdaptorDescription'] = _FILEADAPTORDESCRIPTION
DESCRIPTOR.message_types_by_name['FileAdaptorDescriptions'] = _FILEADAPTORDESCRIPTIONS
DESCRIPTOR.message_types_by_name['AdaptorName'] = _ADAPTORNAME
DESCRIPTOR.message_types_by_name['CertificateCredential'] = _CERTIFICATECREDENTIAL
DESCRIPTOR.message_types_by_name['PasswordCredential'] = _PASSWORDCREDENTIAL
DESCRIPTOR.message_types_by_name['NewFileSystemRequest'] = _NEWFILESYSTEMREQUEST
DESCRIPTOR.message_types_by_name['FileSystem'] = _FILESYSTEM
DESCRIPTOR.message_types_by_name['FileSystems'] = _FILESYSTEMS
DESCRIPTOR.message_types_by_name['Path'] = _PATH
DESCRIPTOR.message_types_by_name['CopyRequest'] = _COPYREQUEST
DESCRIPTOR.message_types_by_name['SourceTarget'] = _SOURCETARGET
DESCRIPTOR.message_types_by_name['Copy'] = _COPY
DESCRIPTOR.message_types_by_name['CopyStatus'] = _COPYSTATUS
DESCRIPTOR.message_types_by_name['CopyStatuses'] = _COPYSTATUSES
DESCRIPTOR.message_types_by_name['FileAttributes'] = _FILEATTRIBUTES
DESCRIPTOR.message_types_by_name['PosixFilePermissionsRequest'] = _POSIXFILEPERMISSIONSREQUEST
DESCRIPTOR.message_types_by_name['FileStream'] = _FILESTREAM
DESCRIPTOR.message_types_by_name['WriteRequest'] = _WRITEREQUEST
DESCRIPTOR.message_types_by_name['WalkFileTreeRequest'] = _WALKFILETREEREQUEST
DESCRIPTOR.message_types_by_name['PathWithAttributes'] = _PATHWITHATTRIBUTES
DESCRIPTOR.message_types_by_name['NewSchedulerRequest'] = _NEWSCHEDULERREQUEST
DESCRIPTOR.message_types_by_name['Scheduler'] = _SCHEDULER
DESCRIPTOR.message_types_by_name['Schedulers'] = _SCHEDULERS
DESCRIPTOR.message_types_by_name['JobDescription'] = _JOBDESCRIPTION
DESCRIPTOR.message_types_by_name['SubmitJobRequest'] = _SUBMITJOBREQUEST
DESCRIPTOR.message_types_by_name['Job'] = _JOB
DESCRIPTOR.message_types_by_name['Jobs'] = _JOBS
DESCRIPTOR.message_types_by_name['Queue'] = _QUEUE
DESCRIPTOR.message_types_by_name['Queues'] = _QUEUES
DESCRIPTOR.message_types_by_name['SchedulerAndQueues'] = _SCHEDULERANDQUEUES
DESCRIPTOR.message_types_by_name['SchedulerAndQueue'] = _SCHEDULERANDQUEUE
DESCRIPTOR.message_types_by_name['JobStatus'] = _JOBSTATUS
DESCRIPTOR.message_types_by_name['JobStatuses'] = _JOBSTATUSES
DESCRIPTOR.message_types_by_name['QueueStatus'] = _QUEUESTATUS
DESCRIPTOR.message_types_by_name['QueueStatuses'] = _QUEUESTATUSES
DESCRIPTOR.message_types_by_name['JobInputStream'] = _JOBINPUTSTREAM
DESCRIPTOR.message_types_by_name['JobOutputStreams'] = _JOBOUTPUTSTREAMS
DESCRIPTOR.message_types_by_name['Is'] = _IS
DESCRIPTOR.enum_types_by_name['PosixFilePermission'] = _POSIXFILEPERMISSION

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Empty)
  ))
_sym_db.RegisterMessage(Empty)

Properties = _reflection.GeneratedProtocolMessageType('Properties', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _PROPERTIES_PROPERTIESENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.Properties.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _PROPERTIES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Properties)
  ))
_sym_db.RegisterMessage(Properties)
_sym_db.RegisterMessage(Properties.PropertiesEntry)

PropertyDescription = _reflection.GeneratedProtocolMessageType('PropertyDescription', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTYDESCRIPTION,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PropertyDescription)
  ))
_sym_db.RegisterMessage(PropertyDescription)

PropertyDescriptions = _reflection.GeneratedProtocolMessageType('PropertyDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTYDESCRIPTIONS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PropertyDescriptions)
  ))
_sym_db.RegisterMessage(PropertyDescriptions)

JobAdaptorDescription = _reflection.GeneratedProtocolMessageType('JobAdaptorDescription', (_message.Message,), dict(
  DESCRIPTOR = _JOBADAPTORDESCRIPTION,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobAdaptorDescription)
  ))
_sym_db.RegisterMessage(JobAdaptorDescription)

JobAdaptorDescriptions = _reflection.GeneratedProtocolMessageType('JobAdaptorDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _JOBADAPTORDESCRIPTIONS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobAdaptorDescriptions)
  ))
_sym_db.RegisterMessage(JobAdaptorDescriptions)

FileAdaptorDescription = _reflection.GeneratedProtocolMessageType('FileAdaptorDescription', (_message.Message,), dict(
  DESCRIPTOR = _FILEADAPTORDESCRIPTION,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileAdaptorDescription)
  ))
_sym_db.RegisterMessage(FileAdaptorDescription)

FileAdaptorDescriptions = _reflection.GeneratedProtocolMessageType('FileAdaptorDescriptions', (_message.Message,), dict(
  DESCRIPTOR = _FILEADAPTORDESCRIPTIONS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileAdaptorDescriptions)
  ))
_sym_db.RegisterMessage(FileAdaptorDescriptions)

AdaptorName = _reflection.GeneratedProtocolMessageType('AdaptorName', (_message.Message,), dict(
  DESCRIPTOR = _ADAPTORNAME,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.AdaptorName)
  ))
_sym_db.RegisterMessage(AdaptorName)

CertificateCredential = _reflection.GeneratedProtocolMessageType('CertificateCredential', (_message.Message,), dict(
  DESCRIPTOR = _CERTIFICATECREDENTIAL,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CertificateCredential)
  ))
_sym_db.RegisterMessage(CertificateCredential)

PasswordCredential = _reflection.GeneratedProtocolMessageType('PasswordCredential', (_message.Message,), dict(
  DESCRIPTOR = _PASSWORDCREDENTIAL,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PasswordCredential)
  ))
_sym_db.RegisterMessage(PasswordCredential)

NewFileSystemRequest = _reflection.GeneratedProtocolMessageType('NewFileSystemRequest', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _NEWFILESYSTEMREQUEST_PROPERTIESENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.NewFileSystemRequest.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _NEWFILESYSTEMREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.NewFileSystemRequest)
  ))
_sym_db.RegisterMessage(NewFileSystemRequest)
_sym_db.RegisterMessage(NewFileSystemRequest.PropertiesEntry)

FileSystem = _reflection.GeneratedProtocolMessageType('FileSystem', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEM,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystem)
  ))
_sym_db.RegisterMessage(FileSystem)

FileSystems = _reflection.GeneratedProtocolMessageType('FileSystems', (_message.Message,), dict(
  DESCRIPTOR = _FILESYSTEMS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileSystems)
  ))
_sym_db.RegisterMessage(FileSystems)

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), dict(
  DESCRIPTOR = _PATH,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Path)
  ))
_sym_db.RegisterMessage(Path)

CopyRequest = _reflection.GeneratedProtocolMessageType('CopyRequest', (_message.Message,), dict(
  DESCRIPTOR = _COPYREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyRequest)
  ))
_sym_db.RegisterMessage(CopyRequest)

SourceTarget = _reflection.GeneratedProtocolMessageType('SourceTarget', (_message.Message,), dict(
  DESCRIPTOR = _SOURCETARGET,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SourceTarget)
  ))
_sym_db.RegisterMessage(SourceTarget)

Copy = _reflection.GeneratedProtocolMessageType('Copy', (_message.Message,), dict(
  DESCRIPTOR = _COPY,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Copy)
  ))
_sym_db.RegisterMessage(Copy)

CopyStatus = _reflection.GeneratedProtocolMessageType('CopyStatus', (_message.Message,), dict(
  DESCRIPTOR = _COPYSTATUS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyStatus)
  ))
_sym_db.RegisterMessage(CopyStatus)

CopyStatuses = _reflection.GeneratedProtocolMessageType('CopyStatuses', (_message.Message,), dict(
  DESCRIPTOR = _COPYSTATUSES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.CopyStatuses)
  ))
_sym_db.RegisterMessage(CopyStatuses)

FileAttributes = _reflection.GeneratedProtocolMessageType('FileAttributes', (_message.Message,), dict(
  DESCRIPTOR = _FILEATTRIBUTES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileAttributes)
  ))
_sym_db.RegisterMessage(FileAttributes)

PosixFilePermissionsRequest = _reflection.GeneratedProtocolMessageType('PosixFilePermissionsRequest', (_message.Message,), dict(
  DESCRIPTOR = _POSIXFILEPERMISSIONSREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PosixFilePermissionsRequest)
  ))
_sym_db.RegisterMessage(PosixFilePermissionsRequest)

FileStream = _reflection.GeneratedProtocolMessageType('FileStream', (_message.Message,), dict(
  DESCRIPTOR = _FILESTREAM,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.FileStream)
  ))
_sym_db.RegisterMessage(FileStream)

WriteRequest = _reflection.GeneratedProtocolMessageType('WriteRequest', (_message.Message,), dict(
  DESCRIPTOR = _WRITEREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.WriteRequest)
  ))
_sym_db.RegisterMessage(WriteRequest)

WalkFileTreeRequest = _reflection.GeneratedProtocolMessageType('WalkFileTreeRequest', (_message.Message,), dict(
  DESCRIPTOR = _WALKFILETREEREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.WalkFileTreeRequest)
  ))
_sym_db.RegisterMessage(WalkFileTreeRequest)

PathWithAttributes = _reflection.GeneratedProtocolMessageType('PathWithAttributes', (_message.Message,), dict(
  DESCRIPTOR = _PATHWITHATTRIBUTES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.PathWithAttributes)
  ))
_sym_db.RegisterMessage(PathWithAttributes)

NewSchedulerRequest = _reflection.GeneratedProtocolMessageType('NewSchedulerRequest', (_message.Message,), dict(

  PropertiesEntry = _reflection.GeneratedProtocolMessageType('PropertiesEntry', (_message.Message,), dict(
    DESCRIPTOR = _NEWSCHEDULERREQUEST_PROPERTIESENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.NewSchedulerRequest.PropertiesEntry)
    ))
  ,
  DESCRIPTOR = _NEWSCHEDULERREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.NewSchedulerRequest)
  ))
_sym_db.RegisterMessage(NewSchedulerRequest)
_sym_db.RegisterMessage(NewSchedulerRequest.PropertiesEntry)

Scheduler = _reflection.GeneratedProtocolMessageType('Scheduler', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULER,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Scheduler)
  ))
_sym_db.RegisterMessage(Scheduler)

Schedulers = _reflection.GeneratedProtocolMessageType('Schedulers', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Schedulers)
  ))
_sym_db.RegisterMessage(Schedulers)

JobDescription = _reflection.GeneratedProtocolMessageType('JobDescription', (_message.Message,), dict(

  EnvironmentEntry = _reflection.GeneratedProtocolMessageType('EnvironmentEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBDESCRIPTION_ENVIRONMENTENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobDescription.EnvironmentEntry)
    ))
  ,

  OptionsEntry = _reflection.GeneratedProtocolMessageType('OptionsEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBDESCRIPTION_OPTIONSENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobDescription.OptionsEntry)
    ))
  ,
  DESCRIPTOR = _JOBDESCRIPTION,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobDescription)
  ))
_sym_db.RegisterMessage(JobDescription)
_sym_db.RegisterMessage(JobDescription.EnvironmentEntry)
_sym_db.RegisterMessage(JobDescription.OptionsEntry)

SubmitJobRequest = _reflection.GeneratedProtocolMessageType('SubmitJobRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBMITJOBREQUEST,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SubmitJobRequest)
  ))
_sym_db.RegisterMessage(SubmitJobRequest)

Job = _reflection.GeneratedProtocolMessageType('Job', (_message.Message,), dict(
  DESCRIPTOR = _JOB,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Job)
  ))
_sym_db.RegisterMessage(Job)

Jobs = _reflection.GeneratedProtocolMessageType('Jobs', (_message.Message,), dict(
  DESCRIPTOR = _JOBS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Jobs)
  ))
_sym_db.RegisterMessage(Jobs)

Queue = _reflection.GeneratedProtocolMessageType('Queue', (_message.Message,), dict(
  DESCRIPTOR = _QUEUE,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Queue)
  ))
_sym_db.RegisterMessage(Queue)

Queues = _reflection.GeneratedProtocolMessageType('Queues', (_message.Message,), dict(
  DESCRIPTOR = _QUEUES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Queues)
  ))
_sym_db.RegisterMessage(Queues)

SchedulerAndQueues = _reflection.GeneratedProtocolMessageType('SchedulerAndQueues', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERANDQUEUES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SchedulerAndQueues)
  ))
_sym_db.RegisterMessage(SchedulerAndQueues)

SchedulerAndQueue = _reflection.GeneratedProtocolMessageType('SchedulerAndQueue', (_message.Message,), dict(
  DESCRIPTOR = _SCHEDULERANDQUEUE,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.SchedulerAndQueue)
  ))
_sym_db.RegisterMessage(SchedulerAndQueue)

JobStatus = _reflection.GeneratedProtocolMessageType('JobStatus', (_message.Message,), dict(

  SchedulerSpecificInformationEntry = _reflection.GeneratedProtocolMessageType('SchedulerSpecificInformationEntry', (_message.Message,), dict(
    DESCRIPTOR = _JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.JobStatus.SchedulerSpecificInformationEntry)
    ))
  ,
  DESCRIPTOR = _JOBSTATUS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobStatus)
  ))
_sym_db.RegisterMessage(JobStatus)
_sym_db.RegisterMessage(JobStatus.SchedulerSpecificInformationEntry)

JobStatuses = _reflection.GeneratedProtocolMessageType('JobStatuses', (_message.Message,), dict(
  DESCRIPTOR = _JOBSTATUSES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobStatuses)
  ))
_sym_db.RegisterMessage(JobStatuses)

QueueStatus = _reflection.GeneratedProtocolMessageType('QueueStatus', (_message.Message,), dict(

  SchedulerSpecificInformationEntry = _reflection.GeneratedProtocolMessageType('SchedulerSpecificInformationEntry', (_message.Message,), dict(
    DESCRIPTOR = _QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY,
    __module__ = 'xenon_pb2'
    # @@protoc_insertion_point(class_scope:xenon.QueueStatus.SchedulerSpecificInformationEntry)
    ))
  ,
  DESCRIPTOR = _QUEUESTATUS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.QueueStatus)
  ))
_sym_db.RegisterMessage(QueueStatus)
_sym_db.RegisterMessage(QueueStatus.SchedulerSpecificInformationEntry)

QueueStatuses = _reflection.GeneratedProtocolMessageType('QueueStatuses', (_message.Message,), dict(
  DESCRIPTOR = _QUEUESTATUSES,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.QueueStatuses)
  ))
_sym_db.RegisterMessage(QueueStatuses)

JobInputStream = _reflection.GeneratedProtocolMessageType('JobInputStream', (_message.Message,), dict(
  DESCRIPTOR = _JOBINPUTSTREAM,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobInputStream)
  ))
_sym_db.RegisterMessage(JobInputStream)

JobOutputStreams = _reflection.GeneratedProtocolMessageType('JobOutputStreams', (_message.Message,), dict(
  DESCRIPTOR = _JOBOUTPUTSTREAMS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.JobOutputStreams)
  ))
_sym_db.RegisterMessage(JobOutputStreams)

Is = _reflection.GeneratedProtocolMessageType('Is', (_message.Message,), dict(
  DESCRIPTOR = _IS,
  __module__ = 'xenon_pb2'
  # @@protoc_insertion_point(class_scope:xenon.Is)
  ))
_sym_db.RegisterMessage(Is)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034nl.esciencecenter.xenon.grpcB\nXenonProto'))
_PROPERTIES_PROPERTIESENTRY.has_options = True
_PROPERTIES_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_NEWFILESYSTEMREQUEST_PROPERTIESENTRY.has_options = True
_NEWFILESYSTEMREQUEST_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_NEWSCHEDULERREQUEST_PROPERTIESENTRY.has_options = True
_NEWSCHEDULERREQUEST_PROPERTIESENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBDESCRIPTION_ENVIRONMENTENTRY.has_options = True
_JOBDESCRIPTION_ENVIRONMENTENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBDESCRIPTION_OPTIONSENTRY.has_options = True
_JOBDESCRIPTION_OPTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.has_options = True
_JOBSTATUS_SCHEDULERSPECIFICINFORMATIONENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY.has_options = True
_QUEUESTATUS_SCHEDULERSPECIFICINFORMATIONENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class XenonGlobalStub(object):
    """The functionality of the Xenon XenonFactory class
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.newXenon = channel.unary_unary(
          '/xenon.XenonGlobal/newXenon',
          request_serializer=Properties.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.getSupportedProperties = channel.unary_unary(
          '/xenon.XenonGlobal/getSupportedProperties',
          request_serializer=Empty.SerializeToString,
          response_deserializer=PropertyDescriptions.FromString,
          )


  class XenonGlobalServicer(object):
    """The functionality of the Xenon XenonFactory class
    """

    def newXenon(self, request, context):
      """Create a new Xenon instance

      WATCH OUT!!! Must be called before calling any XenonFiles or XenonJob methods
      otherwise a Xenon instance is created without properties
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getSupportedProperties(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_XenonGlobalServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'newXenon': grpc.unary_unary_rpc_method_handler(
            servicer.newXenon,
            request_deserializer=Properties.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'getSupportedProperties': grpc.unary_unary_rpc_method_handler(
            servicer.getSupportedProperties,
            request_deserializer=Empty.FromString,
            response_serializer=PropertyDescriptions.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xenon.XenonGlobal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class XenonFilesStub(object):
    """XenonFactory methods not implemented in grpc
    - endAll(), stop server to end all Xenon instances
    - end(), stop server to end all Xenon instances

    XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.getAdaptorDescriptions = channel.unary_unary(
          '/xenon.XenonFiles/getAdaptorDescriptions',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileAdaptorDescriptions.FromString,
          )
      self.getAdaptorDescription = channel.unary_unary(
          '/xenon.XenonFiles/getAdaptorDescription',
          request_serializer=AdaptorName.SerializeToString,
          response_deserializer=FileAdaptorDescription.FromString,
          )
      self.newFileSystem = channel.unary_unary(
          '/xenon.XenonFiles/newFileSystem',
          request_serializer=NewFileSystemRequest.SerializeToString,
          response_deserializer=FileSystem.FromString,
          )
      self.createDirectories = channel.unary_unary(
          '/xenon.XenonFiles/createDirectories',
          request_serializer=Path.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.createDirectory = channel.unary_unary(
          '/xenon.XenonFiles/createDirectory',
          request_serializer=Path.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.createFile = channel.unary_unary(
          '/xenon.XenonFiles/createFile',
          request_serializer=Path.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.backgroundCopy = channel.unary_unary(
          '/xenon.XenonFiles/backgroundCopy',
          request_serializer=CopyRequest.SerializeToString,
          response_deserializer=Copy.FromString,
          )
      self.cancelBackgroundCopy = channel.unary_unary(
          '/xenon.XenonFiles/cancelBackgroundCopy',
          request_serializer=Copy.SerializeToString,
          response_deserializer=CopyStatus.FromString,
          )
      self.getBackgroundCopyStatus = channel.unary_unary(
          '/xenon.XenonFiles/getBackgroundCopyStatus',
          request_serializer=Copy.SerializeToString,
          response_deserializer=CopyStatus.FromString,
          )
      self.listBackgroundCopyStatuses = channel.unary_unary(
          '/xenon.XenonFiles/listBackgroundCopyStatuses',
          request_serializer=Empty.SerializeToString,
          response_deserializer=CopyStatuses.FromString,
          )
      self.deleteBackgroundCopy = channel.unary_unary(
          '/xenon.XenonFiles/deleteBackgroundCopy',
          request_serializer=Copy.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.copy = channel.unary_unary(
          '/xenon.XenonFiles/copy',
          request_serializer=CopyRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.move = channel.unary_unary(
          '/xenon.XenonFiles/move',
          request_serializer=SourceTarget.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.delete = channel.unary_unary(
          '/xenon.XenonFiles/delete',
          request_serializer=Path.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.exists = channel.unary_unary(
          '/xenon.XenonFiles/exists',
          request_serializer=Path.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.read = channel.unary_stream(
          '/xenon.XenonFiles/read',
          request_serializer=Path.SerializeToString,
          response_deserializer=FileStream.FromString,
          )
      self.write = channel.stream_unary(
          '/xenon.XenonFiles/write',
          request_serializer=WriteRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.walkFileTree = channel.unary_stream(
          '/xenon.XenonFiles/walkFileTree',
          request_serializer=WalkFileTreeRequest.SerializeToString,
          response_deserializer=PathWithAttributes.FromString,
          )
      self.getAttributes = channel.unary_unary(
          '/xenon.XenonFiles/getAttributes',
          request_serializer=Path.SerializeToString,
          response_deserializer=FileAttributes.FromString,
          )
      self.setPosixFilePermissions = channel.unary_unary(
          '/xenon.XenonFiles/setPosixFilePermissions',
          request_serializer=PosixFilePermissionsRequest.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.readSymbolicLink = channel.unary_unary(
          '/xenon.XenonFiles/readSymbolicLink',
          request_serializer=Path.SerializeToString,
          response_deserializer=Path.FromString,
          )
      self.isOpen = channel.unary_unary(
          '/xenon.XenonFiles/isOpen',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.close = channel.unary_unary(
          '/xenon.XenonFiles/close',
          request_serializer=FileSystem.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.listFileSystems = channel.unary_unary(
          '/xenon.XenonFiles/listFileSystems',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileSystems.FromString,
          )
      self.localFileSystems = channel.unary_unary(
          '/xenon.XenonFiles/localFileSystems',
          request_serializer=Empty.SerializeToString,
          response_deserializer=FileSystems.FromString,
          )


  class XenonFilesServicer(object):
    """XenonFactory methods not implemented in grpc
    - endAll(), stop server to end all Xenon instances
    - end(), stop server to end all Xenon instances

    XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """

    def getAdaptorDescriptions(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorDescription(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def newFileSystem(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createDirectories(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createDirectory(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def createFile(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def backgroundCopy(self, request, context):
      """Asynchronous recursive copy of files.
      in Xenon it is called copy() with CopyOption.ASYNCHRONOUS
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cancelBackgroundCopy(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getBackgroundCopyStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listBackgroundCopyStatuses(self, request, context):
      """List currently active copy operations
      Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def deleteBackgroundCopy(self, request, context):
      """Delete background copy, will also cancel when not done
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def copy(self, request, context):
      """Synchronous recursive opy
      in Xenon it is called copy() without CopyOption.ASYNCHRONOUS
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def move(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
      """delete a file/symlink or recursivly delete a directory
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def exists(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
      """in Xenon it is called newInputStream()
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def write(self, request_iterator, context):
      """in Xenon it is called newOutputStream()
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def walkFileTree(self, request, context):
      """In Xenon its functonality is split into newAttributesDirectoryStream, newDirectoryStream and
      utils.walkFileTree methods.
      In Xenon a filter object or visitor object can be used, this is not possible in rpc method,
      limited filtering is offered as a regexp filter on filename.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAttributes(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def setPosixFilePermissions(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def readSymbolicLink(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isOpen(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
      """Closes a filestem, any actions running it with this filestystem will be terminated, will also forget the filesystem
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listFileSystems(self, request, context):
      """List currently created filesystems
      Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def localFileSystems(self, request, context):
      """Returns filesystems for all local drives
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_XenonFilesServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescriptions,
            request_deserializer=Empty.FromString,
            response_serializer=FileAdaptorDescriptions.SerializeToString,
        ),
        'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescription,
            request_deserializer=AdaptorName.FromString,
            response_serializer=FileAdaptorDescription.SerializeToString,
        ),
        'newFileSystem': grpc.unary_unary_rpc_method_handler(
            servicer.newFileSystem,
            request_deserializer=NewFileSystemRequest.FromString,
            response_serializer=FileSystem.SerializeToString,
        ),
        'createDirectories': grpc.unary_unary_rpc_method_handler(
            servicer.createDirectories,
            request_deserializer=Path.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'createDirectory': grpc.unary_unary_rpc_method_handler(
            servicer.createDirectory,
            request_deserializer=Path.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'createFile': grpc.unary_unary_rpc_method_handler(
            servicer.createFile,
            request_deserializer=Path.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'backgroundCopy': grpc.unary_unary_rpc_method_handler(
            servicer.backgroundCopy,
            request_deserializer=CopyRequest.FromString,
            response_serializer=Copy.SerializeToString,
        ),
        'cancelBackgroundCopy': grpc.unary_unary_rpc_method_handler(
            servicer.cancelBackgroundCopy,
            request_deserializer=Copy.FromString,
            response_serializer=CopyStatus.SerializeToString,
        ),
        'getBackgroundCopyStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getBackgroundCopyStatus,
            request_deserializer=Copy.FromString,
            response_serializer=CopyStatus.SerializeToString,
        ),
        'listBackgroundCopyStatuses': grpc.unary_unary_rpc_method_handler(
            servicer.listBackgroundCopyStatuses,
            request_deserializer=Empty.FromString,
            response_serializer=CopyStatuses.SerializeToString,
        ),
        'deleteBackgroundCopy': grpc.unary_unary_rpc_method_handler(
            servicer.deleteBackgroundCopy,
            request_deserializer=Copy.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'copy': grpc.unary_unary_rpc_method_handler(
            servicer.copy,
            request_deserializer=CopyRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'move': grpc.unary_unary_rpc_method_handler(
            servicer.move,
            request_deserializer=SourceTarget.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'delete': grpc.unary_unary_rpc_method_handler(
            servicer.delete,
            request_deserializer=Path.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'exists': grpc.unary_unary_rpc_method_handler(
            servicer.exists,
            request_deserializer=Path.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'read': grpc.unary_stream_rpc_method_handler(
            servicer.read,
            request_deserializer=Path.FromString,
            response_serializer=FileStream.SerializeToString,
        ),
        'write': grpc.stream_unary_rpc_method_handler(
            servicer.write,
            request_deserializer=WriteRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'walkFileTree': grpc.unary_stream_rpc_method_handler(
            servicer.walkFileTree,
            request_deserializer=WalkFileTreeRequest.FromString,
            response_serializer=PathWithAttributes.SerializeToString,
        ),
        'getAttributes': grpc.unary_unary_rpc_method_handler(
            servicer.getAttributes,
            request_deserializer=Path.FromString,
            response_serializer=FileAttributes.SerializeToString,
        ),
        'setPosixFilePermissions': grpc.unary_unary_rpc_method_handler(
            servicer.setPosixFilePermissions,
            request_deserializer=PosixFilePermissionsRequest.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'readSymbolicLink': grpc.unary_unary_rpc_method_handler(
            servicer.readSymbolicLink,
            request_deserializer=Path.FromString,
            response_serializer=Path.SerializeToString,
        ),
        'isOpen': grpc.unary_unary_rpc_method_handler(
            servicer.isOpen,
            request_deserializer=FileSystem.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'close': grpc.unary_unary_rpc_method_handler(
            servicer.close,
            request_deserializer=FileSystem.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'listFileSystems': grpc.unary_unary_rpc_method_handler(
            servicer.listFileSystems,
            request_deserializer=Empty.FromString,
            response_serializer=FileSystems.SerializeToString,
        ),
        'localFileSystems': grpc.unary_unary_rpc_method_handler(
            servicer.localFileSystems,
            request_deserializer=Empty.FromString,
            response_serializer=FileSystems.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xenon.XenonFiles', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class XenonJobsStub(object):
    """Xenon files methods not implemented in grpc
    - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

    The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.getAdaptorDescriptions = channel.unary_unary(
          '/xenon.XenonJobs/getAdaptorDescriptions',
          request_serializer=Empty.SerializeToString,
          response_deserializer=JobAdaptorDescriptions.FromString,
          )
      self.getAdaptorDescription = channel.unary_unary(
          '/xenon.XenonJobs/getAdaptorDescription',
          request_serializer=AdaptorName.SerializeToString,
          response_deserializer=JobAdaptorDescription.FromString,
          )
      self.newScheduler = channel.unary_unary(
          '/xenon.XenonJobs/newScheduler',
          request_serializer=NewSchedulerRequest.SerializeToString,
          response_deserializer=Scheduler.FromString,
          )
      self.submitJob = channel.unary_unary(
          '/xenon.XenonJobs/submitJob',
          request_serializer=SubmitJobRequest.SerializeToString,
          response_deserializer=Job.FromString,
          )
      self.getQueues = channel.unary_unary(
          '/xenon.XenonJobs/getQueues',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Queues.FromString,
          )
      self.getDefaultQueueName = channel.unary_unary(
          '/xenon.XenonJobs/getDefaultQueueName',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Queue.FromString,
          )
      self.getJobs = channel.unary_unary(
          '/xenon.XenonJobs/getJobs',
          request_serializer=SchedulerAndQueues.SerializeToString,
          response_deserializer=Jobs.FromString,
          )
      self.getJobStatus = channel.unary_unary(
          '/xenon.XenonJobs/getJobStatus',
          request_serializer=Job.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.getJobStatuses = channel.unary_unary(
          '/xenon.XenonJobs/getJobStatuses',
          request_serializer=Jobs.SerializeToString,
          response_deserializer=JobStatuses.FromString,
          )
      self.getQueueStatus = channel.unary_unary(
          '/xenon.XenonJobs/getQueueStatus',
          request_serializer=SchedulerAndQueue.SerializeToString,
          response_deserializer=QueueStatus.FromString,
          )
      self.getQueueStatuses = channel.unary_unary(
          '/xenon.XenonJobs/getQueueStatuses',
          request_serializer=SchedulerAndQueues.SerializeToString,
          response_deserializer=QueueStatuses.FromString,
          )
      self.waitUntilDone = channel.unary_unary(
          '/xenon.XenonJobs/waitUntilDone',
          request_serializer=Job.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.waitUntilRunning = channel.unary_unary(
          '/xenon.XenonJobs/waitUntilRunning',
          request_serializer=Job.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.getStreams = channel.stream_stream(
          '/xenon.XenonJobs/getStreams',
          request_serializer=JobInputStream.SerializeToString,
          response_deserializer=JobOutputStreams.FromString,
          )
      self.isOpen = channel.unary_unary(
          '/xenon.XenonJobs/isOpen',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Is.FromString,
          )
      self.cancelJob = channel.unary_unary(
          '/xenon.XenonJobs/cancelJob',
          request_serializer=Job.SerializeToString,
          response_deserializer=JobStatus.FromString,
          )
      self.deleteJob = channel.unary_unary(
          '/xenon.XenonJobs/deleteJob',
          request_serializer=Job.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.close = channel.unary_unary(
          '/xenon.XenonJobs/close',
          request_serializer=Scheduler.SerializeToString,
          response_deserializer=Empty.FromString,
          )
      self.listSchedulers = channel.unary_unary(
          '/xenon.XenonJobs/listSchedulers',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Schedulers.FromString,
          )
      self.listJobs = channel.unary_unary(
          '/xenon.XenonJobs/listJobs',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Jobs.FromString,
          )
      self.localScheduler = channel.unary_unary(
          '/xenon.XenonJobs/localScheduler',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Scheduler.FromString,
          )


  class XenonJobsServicer(object):
    """Xenon files methods not implemented in grpc
    - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

    The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """

    def getAdaptorDescriptions(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getAdaptorDescription(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def newScheduler(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def submitJob(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueues(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getDefaultQueueName(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobs(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getJobStatuses(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueueStatus(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getQueueStatuses(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def waitUntilDone(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def waitUntilRunning(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def getStreams(self, request_iterator, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def isOpen(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def cancelJob(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def deleteJob(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def close(self, request, context):
      """Close scheduler and forget it
      If scheduler is online then any jobs pending/running will become invalid
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listSchedulers(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def listJobs(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def localScheduler(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_XenonJobsServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescriptions,
            request_deserializer=Empty.FromString,
            response_serializer=JobAdaptorDescriptions.SerializeToString,
        ),
        'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
            servicer.getAdaptorDescription,
            request_deserializer=AdaptorName.FromString,
            response_serializer=JobAdaptorDescription.SerializeToString,
        ),
        'newScheduler': grpc.unary_unary_rpc_method_handler(
            servicer.newScheduler,
            request_deserializer=NewSchedulerRequest.FromString,
            response_serializer=Scheduler.SerializeToString,
        ),
        'submitJob': grpc.unary_unary_rpc_method_handler(
            servicer.submitJob,
            request_deserializer=SubmitJobRequest.FromString,
            response_serializer=Job.SerializeToString,
        ),
        'getQueues': grpc.unary_unary_rpc_method_handler(
            servicer.getQueues,
            request_deserializer=Scheduler.FromString,
            response_serializer=Queues.SerializeToString,
        ),
        'getDefaultQueueName': grpc.unary_unary_rpc_method_handler(
            servicer.getDefaultQueueName,
            request_deserializer=Scheduler.FromString,
            response_serializer=Queue.SerializeToString,
        ),
        'getJobs': grpc.unary_unary_rpc_method_handler(
            servicer.getJobs,
            request_deserializer=SchedulerAndQueues.FromString,
            response_serializer=Jobs.SerializeToString,
        ),
        'getJobStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getJobStatus,
            request_deserializer=Job.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'getJobStatuses': grpc.unary_unary_rpc_method_handler(
            servicer.getJobStatuses,
            request_deserializer=Jobs.FromString,
            response_serializer=JobStatuses.SerializeToString,
        ),
        'getQueueStatus': grpc.unary_unary_rpc_method_handler(
            servicer.getQueueStatus,
            request_deserializer=SchedulerAndQueue.FromString,
            response_serializer=QueueStatus.SerializeToString,
        ),
        'getQueueStatuses': grpc.unary_unary_rpc_method_handler(
            servicer.getQueueStatuses,
            request_deserializer=SchedulerAndQueues.FromString,
            response_serializer=QueueStatuses.SerializeToString,
        ),
        'waitUntilDone': grpc.unary_unary_rpc_method_handler(
            servicer.waitUntilDone,
            request_deserializer=Job.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'waitUntilRunning': grpc.unary_unary_rpc_method_handler(
            servicer.waitUntilRunning,
            request_deserializer=Job.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'getStreams': grpc.stream_stream_rpc_method_handler(
            servicer.getStreams,
            request_deserializer=JobInputStream.FromString,
            response_serializer=JobOutputStreams.SerializeToString,
        ),
        'isOpen': grpc.unary_unary_rpc_method_handler(
            servicer.isOpen,
            request_deserializer=Scheduler.FromString,
            response_serializer=Is.SerializeToString,
        ),
        'cancelJob': grpc.unary_unary_rpc_method_handler(
            servicer.cancelJob,
            request_deserializer=Job.FromString,
            response_serializer=JobStatus.SerializeToString,
        ),
        'deleteJob': grpc.unary_unary_rpc_method_handler(
            servicer.deleteJob,
            request_deserializer=Job.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'close': grpc.unary_unary_rpc_method_handler(
            servicer.close,
            request_deserializer=Scheduler.FromString,
            response_serializer=Empty.SerializeToString,
        ),
        'listSchedulers': grpc.unary_unary_rpc_method_handler(
            servicer.listSchedulers,
            request_deserializer=Empty.FromString,
            response_serializer=Schedulers.SerializeToString,
        ),
        'listJobs': grpc.unary_unary_rpc_method_handler(
            servicer.listJobs,
            request_deserializer=Empty.FromString,
            response_serializer=Jobs.SerializeToString,
        ),
        'localScheduler': grpc.unary_unary_rpc_method_handler(
            servicer.localScheduler,
            request_deserializer=Empty.FromString,
            response_serializer=Scheduler.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xenon.XenonJobs', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaXenonGlobalServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The functionality of the Xenon XenonFactory class
    """
    def newXenon(self, request, context):
      """Create a new Xenon instance

      WATCH OUT!!! Must be called before calling any XenonFiles or XenonJob methods
      otherwise a Xenon instance is created without properties
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getSupportedProperties(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaXenonGlobalStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The functionality of the Xenon XenonFactory class
    """
    def newXenon(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Create a new Xenon instance

      WATCH OUT!!! Must be called before calling any XenonFiles or XenonJob methods
      otherwise a Xenon instance is created without properties
      """
      raise NotImplementedError()
    newXenon.future = None
    def getSupportedProperties(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getSupportedProperties.future = None


  def beta_create_XenonGlobal_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('xenon.XenonGlobal', 'getSupportedProperties'): Empty.FromString,
      ('xenon.XenonGlobal', 'newXenon'): Properties.FromString,
    }
    response_serializers = {
      ('xenon.XenonGlobal', 'getSupportedProperties'): PropertyDescriptions.SerializeToString,
      ('xenon.XenonGlobal', 'newXenon'): Empty.SerializeToString,
    }
    method_implementations = {
      ('xenon.XenonGlobal', 'getSupportedProperties'): face_utilities.unary_unary_inline(servicer.getSupportedProperties),
      ('xenon.XenonGlobal', 'newXenon'): face_utilities.unary_unary_inline(servicer.newXenon),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_XenonGlobal_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('xenon.XenonGlobal', 'getSupportedProperties'): Empty.SerializeToString,
      ('xenon.XenonGlobal', 'newXenon'): Properties.SerializeToString,
    }
    response_deserializers = {
      ('xenon.XenonGlobal', 'getSupportedProperties'): PropertyDescriptions.FromString,
      ('xenon.XenonGlobal', 'newXenon'): Empty.FromString,
    }
    cardinalities = {
      'getSupportedProperties': cardinality.Cardinality.UNARY_UNARY,
      'newXenon': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'xenon.XenonGlobal', cardinalities, options=stub_options)


  class BetaXenonFilesServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """XenonFactory methods not implemented in grpc
    - endAll(), stop server to end all Xenon instances
    - end(), stop server to end all Xenon instances

    XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """
    def getAdaptorDescriptions(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorDescription(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def newFileSystem(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createDirectories(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createDirectory(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def createFile(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def backgroundCopy(self, request, context):
      """Asynchronous recursive copy of files.
      in Xenon it is called copy() with CopyOption.ASYNCHRONOUS
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cancelBackgroundCopy(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getBackgroundCopyStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listBackgroundCopyStatuses(self, request, context):
      """List currently active copy operations
      Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def deleteBackgroundCopy(self, request, context):
      """Delete background copy, will also cancel when not done
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def copy(self, request, context):
      """Synchronous recursive opy
      in Xenon it is called copy() without CopyOption.ASYNCHRONOUS
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def move(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def delete(self, request, context):
      """delete a file/symlink or recursivly delete a directory
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def exists(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def read(self, request, context):
      """in Xenon it is called newInputStream()
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def write(self, request_iterator, context):
      """in Xenon it is called newOutputStream()
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def walkFileTree(self, request, context):
      """In Xenon its functonality is split into newAttributesDirectoryStream, newDirectoryStream and
      utils.walkFileTree methods.
      In Xenon a filter object or visitor object can be used, this is not possible in rpc method,
      limited filtering is offered as a regexp filter on filename.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAttributes(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def setPosixFilePermissions(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def readSymbolicLink(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isOpen(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def close(self, request, context):
      """Closes a filestem, any actions running it with this filestystem will be terminated, will also forget the filesystem
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listFileSystems(self, request, context):
      """List currently created filesystems
      Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def localFileSystems(self, request, context):
      """Returns filesystems for all local drives
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaXenonFilesStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """XenonFactory methods not implemented in grpc
    - endAll(), stop server to end all Xenon instances
    - end(), stop server to end all Xenon instances

    XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
    """
    def getAdaptorDescriptions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getAdaptorDescriptions.future = None
    def getAdaptorDescription(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getAdaptorDescription.future = None
    def newFileSystem(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    newFileSystem.future = None
    def createDirectories(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    createDirectories.future = None
    def createDirectory(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    createDirectory.future = None
    def createFile(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    createFile.future = None
    def backgroundCopy(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Asynchronous recursive copy of files.
      in Xenon it is called copy() with CopyOption.ASYNCHRONOUS
      """
      raise NotImplementedError()
    backgroundCopy.future = None
    def cancelBackgroundCopy(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    cancelBackgroundCopy.future = None
    def getBackgroundCopyStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getBackgroundCopyStatus.future = None
    def listBackgroundCopyStatuses(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """List currently active copy operations
      Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listBackgroundCopyStatuses.future = None
    def deleteBackgroundCopy(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Delete background copy, will also cancel when not done
      """
      raise NotImplementedError()
    deleteBackgroundCopy.future = None
    def copy(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Synchronous recursive opy
      in Xenon it is called copy() without CopyOption.ASYNCHRONOUS
      """
      raise NotImplementedError()
    copy.future = None
    def move(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    move.future = None
    def delete(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """delete a file/symlink or recursivly delete a directory
      """
      raise NotImplementedError()
    delete.future = None
    def exists(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    exists.future = None
    def read(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """in Xenon it is called newInputStream()
      """
      raise NotImplementedError()
    def write(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """in Xenon it is called newOutputStream()
      """
      raise NotImplementedError()
    write.future = None
    def walkFileTree(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """In Xenon its functonality is split into newAttributesDirectoryStream, newDirectoryStream and
      utils.walkFileTree methods.
      In Xenon a filter object or visitor object can be used, this is not possible in rpc method,
      limited filtering is offered as a regexp filter on filename.
      """
      raise NotImplementedError()
    def getAttributes(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getAttributes.future = None
    def setPosixFilePermissions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    setPosixFilePermissions.future = None
    def readSymbolicLink(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    readSymbolicLink.future = None
    def isOpen(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    isOpen.future = None
    def close(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Closes a filestem, any actions running it with this filestystem will be terminated, will also forget the filesystem
      """
      raise NotImplementedError()
    close.future = None
    def listFileSystems(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """List currently created filesystems
      Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listFileSystems.future = None
    def localFileSystems(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Returns filesystems for all local drives
      """
      raise NotImplementedError()
    localFileSystems.future = None


  def beta_create_XenonFiles_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('xenon.XenonFiles', 'backgroundCopy'): CopyRequest.FromString,
      ('xenon.XenonFiles', 'cancelBackgroundCopy'): Copy.FromString,
      ('xenon.XenonFiles', 'close'): FileSystem.FromString,
      ('xenon.XenonFiles', 'copy'): CopyRequest.FromString,
      ('xenon.XenonFiles', 'createDirectories'): Path.FromString,
      ('xenon.XenonFiles', 'createDirectory'): Path.FromString,
      ('xenon.XenonFiles', 'createFile'): Path.FromString,
      ('xenon.XenonFiles', 'delete'): Path.FromString,
      ('xenon.XenonFiles', 'deleteBackgroundCopy'): Copy.FromString,
      ('xenon.XenonFiles', 'exists'): Path.FromString,
      ('xenon.XenonFiles', 'getAdaptorDescription'): AdaptorName.FromString,
      ('xenon.XenonFiles', 'getAdaptorDescriptions'): Empty.FromString,
      ('xenon.XenonFiles', 'getAttributes'): Path.FromString,
      ('xenon.XenonFiles', 'getBackgroundCopyStatus'): Copy.FromString,
      ('xenon.XenonFiles', 'isOpen'): FileSystem.FromString,
      ('xenon.XenonFiles', 'listBackgroundCopyStatuses'): Empty.FromString,
      ('xenon.XenonFiles', 'listFileSystems'): Empty.FromString,
      ('xenon.XenonFiles', 'localFileSystems'): Empty.FromString,
      ('xenon.XenonFiles', 'move'): SourceTarget.FromString,
      ('xenon.XenonFiles', 'newFileSystem'): NewFileSystemRequest.FromString,
      ('xenon.XenonFiles', 'read'): Path.FromString,
      ('xenon.XenonFiles', 'readSymbolicLink'): Path.FromString,
      ('xenon.XenonFiles', 'setPosixFilePermissions'): PosixFilePermissionsRequest.FromString,
      ('xenon.XenonFiles', 'walkFileTree'): WalkFileTreeRequest.FromString,
      ('xenon.XenonFiles', 'write'): WriteRequest.FromString,
    }
    response_serializers = {
      ('xenon.XenonFiles', 'backgroundCopy'): Copy.SerializeToString,
      ('xenon.XenonFiles', 'cancelBackgroundCopy'): CopyStatus.SerializeToString,
      ('xenon.XenonFiles', 'close'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'copy'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'createDirectories'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'createDirectory'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'createFile'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'delete'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'deleteBackgroundCopy'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'exists'): Is.SerializeToString,
      ('xenon.XenonFiles', 'getAdaptorDescription'): FileAdaptorDescription.SerializeToString,
      ('xenon.XenonFiles', 'getAdaptorDescriptions'): FileAdaptorDescriptions.SerializeToString,
      ('xenon.XenonFiles', 'getAttributes'): FileAttributes.SerializeToString,
      ('xenon.XenonFiles', 'getBackgroundCopyStatus'): CopyStatus.SerializeToString,
      ('xenon.XenonFiles', 'isOpen'): Is.SerializeToString,
      ('xenon.XenonFiles', 'listBackgroundCopyStatuses'): CopyStatuses.SerializeToString,
      ('xenon.XenonFiles', 'listFileSystems'): FileSystems.SerializeToString,
      ('xenon.XenonFiles', 'localFileSystems'): FileSystems.SerializeToString,
      ('xenon.XenonFiles', 'move'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'newFileSystem'): FileSystem.SerializeToString,
      ('xenon.XenonFiles', 'read'): FileStream.SerializeToString,
      ('xenon.XenonFiles', 'readSymbolicLink'): Path.SerializeToString,
      ('xenon.XenonFiles', 'setPosixFilePermissions'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'walkFileTree'): PathWithAttributes.SerializeToString,
      ('xenon.XenonFiles', 'write'): Empty.SerializeToString,
    }
    method_implementations = {
      ('xenon.XenonFiles', 'backgroundCopy'): face_utilities.unary_unary_inline(servicer.backgroundCopy),
      ('xenon.XenonFiles', 'cancelBackgroundCopy'): face_utilities.unary_unary_inline(servicer.cancelBackgroundCopy),
      ('xenon.XenonFiles', 'close'): face_utilities.unary_unary_inline(servicer.close),
      ('xenon.XenonFiles', 'copy'): face_utilities.unary_unary_inline(servicer.copy),
      ('xenon.XenonFiles', 'createDirectories'): face_utilities.unary_unary_inline(servicer.createDirectories),
      ('xenon.XenonFiles', 'createDirectory'): face_utilities.unary_unary_inline(servicer.createDirectory),
      ('xenon.XenonFiles', 'createFile'): face_utilities.unary_unary_inline(servicer.createFile),
      ('xenon.XenonFiles', 'delete'): face_utilities.unary_unary_inline(servicer.delete),
      ('xenon.XenonFiles', 'deleteBackgroundCopy'): face_utilities.unary_unary_inline(servicer.deleteBackgroundCopy),
      ('xenon.XenonFiles', 'exists'): face_utilities.unary_unary_inline(servicer.exists),
      ('xenon.XenonFiles', 'getAdaptorDescription'): face_utilities.unary_unary_inline(servicer.getAdaptorDescription),
      ('xenon.XenonFiles', 'getAdaptorDescriptions'): face_utilities.unary_unary_inline(servicer.getAdaptorDescriptions),
      ('xenon.XenonFiles', 'getAttributes'): face_utilities.unary_unary_inline(servicer.getAttributes),
      ('xenon.XenonFiles', 'getBackgroundCopyStatus'): face_utilities.unary_unary_inline(servicer.getBackgroundCopyStatus),
      ('xenon.XenonFiles', 'isOpen'): face_utilities.unary_unary_inline(servicer.isOpen),
      ('xenon.XenonFiles', 'listBackgroundCopyStatuses'): face_utilities.unary_unary_inline(servicer.listBackgroundCopyStatuses),
      ('xenon.XenonFiles', 'listFileSystems'): face_utilities.unary_unary_inline(servicer.listFileSystems),
      ('xenon.XenonFiles', 'localFileSystems'): face_utilities.unary_unary_inline(servicer.localFileSystems),
      ('xenon.XenonFiles', 'move'): face_utilities.unary_unary_inline(servicer.move),
      ('xenon.XenonFiles', 'newFileSystem'): face_utilities.unary_unary_inline(servicer.newFileSystem),
      ('xenon.XenonFiles', 'read'): face_utilities.unary_stream_inline(servicer.read),
      ('xenon.XenonFiles', 'readSymbolicLink'): face_utilities.unary_unary_inline(servicer.readSymbolicLink),
      ('xenon.XenonFiles', 'setPosixFilePermissions'): face_utilities.unary_unary_inline(servicer.setPosixFilePermissions),
      ('xenon.XenonFiles', 'walkFileTree'): face_utilities.unary_stream_inline(servicer.walkFileTree),
      ('xenon.XenonFiles', 'write'): face_utilities.stream_unary_inline(servicer.write),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_XenonFiles_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('xenon.XenonFiles', 'backgroundCopy'): CopyRequest.SerializeToString,
      ('xenon.XenonFiles', 'cancelBackgroundCopy'): Copy.SerializeToString,
      ('xenon.XenonFiles', 'close'): FileSystem.SerializeToString,
      ('xenon.XenonFiles', 'copy'): CopyRequest.SerializeToString,
      ('xenon.XenonFiles', 'createDirectories'): Path.SerializeToString,
      ('xenon.XenonFiles', 'createDirectory'): Path.SerializeToString,
      ('xenon.XenonFiles', 'createFile'): Path.SerializeToString,
      ('xenon.XenonFiles', 'delete'): Path.SerializeToString,
      ('xenon.XenonFiles', 'deleteBackgroundCopy'): Copy.SerializeToString,
      ('xenon.XenonFiles', 'exists'): Path.SerializeToString,
      ('xenon.XenonFiles', 'getAdaptorDescription'): AdaptorName.SerializeToString,
      ('xenon.XenonFiles', 'getAdaptorDescriptions'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'getAttributes'): Path.SerializeToString,
      ('xenon.XenonFiles', 'getBackgroundCopyStatus'): Copy.SerializeToString,
      ('xenon.XenonFiles', 'isOpen'): FileSystem.SerializeToString,
      ('xenon.XenonFiles', 'listBackgroundCopyStatuses'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'listFileSystems'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'localFileSystems'): Empty.SerializeToString,
      ('xenon.XenonFiles', 'move'): SourceTarget.SerializeToString,
      ('xenon.XenonFiles', 'newFileSystem'): NewFileSystemRequest.SerializeToString,
      ('xenon.XenonFiles', 'read'): Path.SerializeToString,
      ('xenon.XenonFiles', 'readSymbolicLink'): Path.SerializeToString,
      ('xenon.XenonFiles', 'setPosixFilePermissions'): PosixFilePermissionsRequest.SerializeToString,
      ('xenon.XenonFiles', 'walkFileTree'): WalkFileTreeRequest.SerializeToString,
      ('xenon.XenonFiles', 'write'): WriteRequest.SerializeToString,
    }
    response_deserializers = {
      ('xenon.XenonFiles', 'backgroundCopy'): Copy.FromString,
      ('xenon.XenonFiles', 'cancelBackgroundCopy'): CopyStatus.FromString,
      ('xenon.XenonFiles', 'close'): Empty.FromString,
      ('xenon.XenonFiles', 'copy'): Empty.FromString,
      ('xenon.XenonFiles', 'createDirectories'): Empty.FromString,
      ('xenon.XenonFiles', 'createDirectory'): Empty.FromString,
      ('xenon.XenonFiles', 'createFile'): Empty.FromString,
      ('xenon.XenonFiles', 'delete'): Empty.FromString,
      ('xenon.XenonFiles', 'deleteBackgroundCopy'): Empty.FromString,
      ('xenon.XenonFiles', 'exists'): Is.FromString,
      ('xenon.XenonFiles', 'getAdaptorDescription'): FileAdaptorDescription.FromString,
      ('xenon.XenonFiles', 'getAdaptorDescriptions'): FileAdaptorDescriptions.FromString,
      ('xenon.XenonFiles', 'getAttributes'): FileAttributes.FromString,
      ('xenon.XenonFiles', 'getBackgroundCopyStatus'): CopyStatus.FromString,
      ('xenon.XenonFiles', 'isOpen'): Is.FromString,
      ('xenon.XenonFiles', 'listBackgroundCopyStatuses'): CopyStatuses.FromString,
      ('xenon.XenonFiles', 'listFileSystems'): FileSystems.FromString,
      ('xenon.XenonFiles', 'localFileSystems'): FileSystems.FromString,
      ('xenon.XenonFiles', 'move'): Empty.FromString,
      ('xenon.XenonFiles', 'newFileSystem'): FileSystem.FromString,
      ('xenon.XenonFiles', 'read'): FileStream.FromString,
      ('xenon.XenonFiles', 'readSymbolicLink'): Path.FromString,
      ('xenon.XenonFiles', 'setPosixFilePermissions'): Empty.FromString,
      ('xenon.XenonFiles', 'walkFileTree'): PathWithAttributes.FromString,
      ('xenon.XenonFiles', 'write'): Empty.FromString,
    }
    cardinalities = {
      'backgroundCopy': cardinality.Cardinality.UNARY_UNARY,
      'cancelBackgroundCopy': cardinality.Cardinality.UNARY_UNARY,
      'close': cardinality.Cardinality.UNARY_UNARY,
      'copy': cardinality.Cardinality.UNARY_UNARY,
      'createDirectories': cardinality.Cardinality.UNARY_UNARY,
      'createDirectory': cardinality.Cardinality.UNARY_UNARY,
      'createFile': cardinality.Cardinality.UNARY_UNARY,
      'delete': cardinality.Cardinality.UNARY_UNARY,
      'deleteBackgroundCopy': cardinality.Cardinality.UNARY_UNARY,
      'exists': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescription': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescriptions': cardinality.Cardinality.UNARY_UNARY,
      'getAttributes': cardinality.Cardinality.UNARY_UNARY,
      'getBackgroundCopyStatus': cardinality.Cardinality.UNARY_UNARY,
      'isOpen': cardinality.Cardinality.UNARY_UNARY,
      'listBackgroundCopyStatuses': cardinality.Cardinality.UNARY_UNARY,
      'listFileSystems': cardinality.Cardinality.UNARY_UNARY,
      'localFileSystems': cardinality.Cardinality.UNARY_UNARY,
      'move': cardinality.Cardinality.UNARY_UNARY,
      'newFileSystem': cardinality.Cardinality.UNARY_UNARY,
      'read': cardinality.Cardinality.UNARY_STREAM,
      'readSymbolicLink': cardinality.Cardinality.UNARY_UNARY,
      'setPosixFilePermissions': cardinality.Cardinality.UNARY_UNARY,
      'walkFileTree': cardinality.Cardinality.UNARY_STREAM,
      'write': cardinality.Cardinality.STREAM_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'xenon.XenonFiles', cardinalities, options=stub_options)


  class BetaXenonJobsServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Xenon files methods not implemented in grpc
    - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

    The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """
    def getAdaptorDescriptions(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getAdaptorDescription(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def newScheduler(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def submitJob(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueues(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getDefaultQueueName(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobs(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getJobStatuses(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueueStatus(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getQueueStatuses(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def waitUntilDone(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def waitUntilRunning(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def getStreams(self, request_iterator, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def isOpen(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def cancelJob(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def deleteJob(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def close(self, request, context):
      """Close scheduler and forget it
      If scheduler is online then any jobs pending/running will become invalid
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listSchedulers(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def listJobs(self, request, context):
      """Specific to grpc, not part of Xenon library
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def localScheduler(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaXenonJobsStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Xenon files methods not implemented in grpc
    - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
    - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

    The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
    """
    def getAdaptorDescriptions(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getAdaptorDescriptions.future = None
    def getAdaptorDescription(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getAdaptorDescription.future = None
    def newScheduler(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    newScheduler.future = None
    def submitJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    submitJob.future = None
    def getQueues(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getQueues.future = None
    def getDefaultQueueName(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getDefaultQueueName.future = None
    def getJobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getJobs.future = None
    def getJobStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getJobStatus.future = None
    def getJobStatuses(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getJobStatuses.future = None
    def getQueueStatus(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getQueueStatus.future = None
    def getQueueStatuses(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    getQueueStatuses.future = None
    def waitUntilDone(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    waitUntilDone.future = None
    def waitUntilRunning(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    waitUntilRunning.future = None
    def getStreams(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def isOpen(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    isOpen.future = None
    def cancelJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    cancelJob.future = None
    def deleteJob(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    deleteJob.future = None
    def close(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Close scheduler and forget it
      If scheduler is online then any jobs pending/running will become invalid
      """
      raise NotImplementedError()
    close.future = None
    def listSchedulers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listSchedulers.future = None
    def listJobs(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Specific to grpc, not part of Xenon library
      """
      raise NotImplementedError()
    listJobs.future = None
    def localScheduler(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    localScheduler.future = None


  def beta_create_XenonJobs_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('xenon.XenonJobs', 'cancelJob'): Job.FromString,
      ('xenon.XenonJobs', 'close'): Scheduler.FromString,
      ('xenon.XenonJobs', 'deleteJob'): Job.FromString,
      ('xenon.XenonJobs', 'getAdaptorDescription'): AdaptorName.FromString,
      ('xenon.XenonJobs', 'getAdaptorDescriptions'): Empty.FromString,
      ('xenon.XenonJobs', 'getDefaultQueueName'): Scheduler.FromString,
      ('xenon.XenonJobs', 'getJobStatus'): Job.FromString,
      ('xenon.XenonJobs', 'getJobStatuses'): Jobs.FromString,
      ('xenon.XenonJobs', 'getJobs'): SchedulerAndQueues.FromString,
      ('xenon.XenonJobs', 'getQueueStatus'): SchedulerAndQueue.FromString,
      ('xenon.XenonJobs', 'getQueueStatuses'): SchedulerAndQueues.FromString,
      ('xenon.XenonJobs', 'getQueues'): Scheduler.FromString,
      ('xenon.XenonJobs', 'getStreams'): JobInputStream.FromString,
      ('xenon.XenonJobs', 'isOpen'): Scheduler.FromString,
      ('xenon.XenonJobs', 'listJobs'): Empty.FromString,
      ('xenon.XenonJobs', 'listSchedulers'): Empty.FromString,
      ('xenon.XenonJobs', 'localScheduler'): Empty.FromString,
      ('xenon.XenonJobs', 'newScheduler'): NewSchedulerRequest.FromString,
      ('xenon.XenonJobs', 'submitJob'): SubmitJobRequest.FromString,
      ('xenon.XenonJobs', 'waitUntilDone'): Job.FromString,
      ('xenon.XenonJobs', 'waitUntilRunning'): Job.FromString,
    }
    response_serializers = {
      ('xenon.XenonJobs', 'cancelJob'): JobStatus.SerializeToString,
      ('xenon.XenonJobs', 'close'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'deleteJob'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'getAdaptorDescription'): JobAdaptorDescription.SerializeToString,
      ('xenon.XenonJobs', 'getAdaptorDescriptions'): JobAdaptorDescriptions.SerializeToString,
      ('xenon.XenonJobs', 'getDefaultQueueName'): Queue.SerializeToString,
      ('xenon.XenonJobs', 'getJobStatus'): JobStatus.SerializeToString,
      ('xenon.XenonJobs', 'getJobStatuses'): JobStatuses.SerializeToString,
      ('xenon.XenonJobs', 'getJobs'): Jobs.SerializeToString,
      ('xenon.XenonJobs', 'getQueueStatus'): QueueStatus.SerializeToString,
      ('xenon.XenonJobs', 'getQueueStatuses'): QueueStatuses.SerializeToString,
      ('xenon.XenonJobs', 'getQueues'): Queues.SerializeToString,
      ('xenon.XenonJobs', 'getStreams'): JobOutputStreams.SerializeToString,
      ('xenon.XenonJobs', 'isOpen'): Is.SerializeToString,
      ('xenon.XenonJobs', 'listJobs'): Jobs.SerializeToString,
      ('xenon.XenonJobs', 'listSchedulers'): Schedulers.SerializeToString,
      ('xenon.XenonJobs', 'localScheduler'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'newScheduler'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'submitJob'): Job.SerializeToString,
      ('xenon.XenonJobs', 'waitUntilDone'): JobStatus.SerializeToString,
      ('xenon.XenonJobs', 'waitUntilRunning'): JobStatus.SerializeToString,
    }
    method_implementations = {
      ('xenon.XenonJobs', 'cancelJob'): face_utilities.unary_unary_inline(servicer.cancelJob),
      ('xenon.XenonJobs', 'close'): face_utilities.unary_unary_inline(servicer.close),
      ('xenon.XenonJobs', 'deleteJob'): face_utilities.unary_unary_inline(servicer.deleteJob),
      ('xenon.XenonJobs', 'getAdaptorDescription'): face_utilities.unary_unary_inline(servicer.getAdaptorDescription),
      ('xenon.XenonJobs', 'getAdaptorDescriptions'): face_utilities.unary_unary_inline(servicer.getAdaptorDescriptions),
      ('xenon.XenonJobs', 'getDefaultQueueName'): face_utilities.unary_unary_inline(servicer.getDefaultQueueName),
      ('xenon.XenonJobs', 'getJobStatus'): face_utilities.unary_unary_inline(servicer.getJobStatus),
      ('xenon.XenonJobs', 'getJobStatuses'): face_utilities.unary_unary_inline(servicer.getJobStatuses),
      ('xenon.XenonJobs', 'getJobs'): face_utilities.unary_unary_inline(servicer.getJobs),
      ('xenon.XenonJobs', 'getQueueStatus'): face_utilities.unary_unary_inline(servicer.getQueueStatus),
      ('xenon.XenonJobs', 'getQueueStatuses'): face_utilities.unary_unary_inline(servicer.getQueueStatuses),
      ('xenon.XenonJobs', 'getQueues'): face_utilities.unary_unary_inline(servicer.getQueues),
      ('xenon.XenonJobs', 'getStreams'): face_utilities.stream_stream_inline(servicer.getStreams),
      ('xenon.XenonJobs', 'isOpen'): face_utilities.unary_unary_inline(servicer.isOpen),
      ('xenon.XenonJobs', 'listJobs'): face_utilities.unary_unary_inline(servicer.listJobs),
      ('xenon.XenonJobs', 'listSchedulers'): face_utilities.unary_unary_inline(servicer.listSchedulers),
      ('xenon.XenonJobs', 'localScheduler'): face_utilities.unary_unary_inline(servicer.localScheduler),
      ('xenon.XenonJobs', 'newScheduler'): face_utilities.unary_unary_inline(servicer.newScheduler),
      ('xenon.XenonJobs', 'submitJob'): face_utilities.unary_unary_inline(servicer.submitJob),
      ('xenon.XenonJobs', 'waitUntilDone'): face_utilities.unary_unary_inline(servicer.waitUntilDone),
      ('xenon.XenonJobs', 'waitUntilRunning'): face_utilities.unary_unary_inline(servicer.waitUntilRunning),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_XenonJobs_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('xenon.XenonJobs', 'cancelJob'): Job.SerializeToString,
      ('xenon.XenonJobs', 'close'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'deleteJob'): Job.SerializeToString,
      ('xenon.XenonJobs', 'getAdaptorDescription'): AdaptorName.SerializeToString,
      ('xenon.XenonJobs', 'getAdaptorDescriptions'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'getDefaultQueueName'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'getJobStatus'): Job.SerializeToString,
      ('xenon.XenonJobs', 'getJobStatuses'): Jobs.SerializeToString,
      ('xenon.XenonJobs', 'getJobs'): SchedulerAndQueues.SerializeToString,
      ('xenon.XenonJobs', 'getQueueStatus'): SchedulerAndQueue.SerializeToString,
      ('xenon.XenonJobs', 'getQueueStatuses'): SchedulerAndQueues.SerializeToString,
      ('xenon.XenonJobs', 'getQueues'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'getStreams'): JobInputStream.SerializeToString,
      ('xenon.XenonJobs', 'isOpen'): Scheduler.SerializeToString,
      ('xenon.XenonJobs', 'listJobs'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'listSchedulers'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'localScheduler'): Empty.SerializeToString,
      ('xenon.XenonJobs', 'newScheduler'): NewSchedulerRequest.SerializeToString,
      ('xenon.XenonJobs', 'submitJob'): SubmitJobRequest.SerializeToString,
      ('xenon.XenonJobs', 'waitUntilDone'): Job.SerializeToString,
      ('xenon.XenonJobs', 'waitUntilRunning'): Job.SerializeToString,
    }
    response_deserializers = {
      ('xenon.XenonJobs', 'cancelJob'): JobStatus.FromString,
      ('xenon.XenonJobs', 'close'): Empty.FromString,
      ('xenon.XenonJobs', 'deleteJob'): Empty.FromString,
      ('xenon.XenonJobs', 'getAdaptorDescription'): JobAdaptorDescription.FromString,
      ('xenon.XenonJobs', 'getAdaptorDescriptions'): JobAdaptorDescriptions.FromString,
      ('xenon.XenonJobs', 'getDefaultQueueName'): Queue.FromString,
      ('xenon.XenonJobs', 'getJobStatus'): JobStatus.FromString,
      ('xenon.XenonJobs', 'getJobStatuses'): JobStatuses.FromString,
      ('xenon.XenonJobs', 'getJobs'): Jobs.FromString,
      ('xenon.XenonJobs', 'getQueueStatus'): QueueStatus.FromString,
      ('xenon.XenonJobs', 'getQueueStatuses'): QueueStatuses.FromString,
      ('xenon.XenonJobs', 'getQueues'): Queues.FromString,
      ('xenon.XenonJobs', 'getStreams'): JobOutputStreams.FromString,
      ('xenon.XenonJobs', 'isOpen'): Is.FromString,
      ('xenon.XenonJobs', 'listJobs'): Jobs.FromString,
      ('xenon.XenonJobs', 'listSchedulers'): Schedulers.FromString,
      ('xenon.XenonJobs', 'localScheduler'): Scheduler.FromString,
      ('xenon.XenonJobs', 'newScheduler'): Scheduler.FromString,
      ('xenon.XenonJobs', 'submitJob'): Job.FromString,
      ('xenon.XenonJobs', 'waitUntilDone'): JobStatus.FromString,
      ('xenon.XenonJobs', 'waitUntilRunning'): JobStatus.FromString,
    }
    cardinalities = {
      'cancelJob': cardinality.Cardinality.UNARY_UNARY,
      'close': cardinality.Cardinality.UNARY_UNARY,
      'deleteJob': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescription': cardinality.Cardinality.UNARY_UNARY,
      'getAdaptorDescriptions': cardinality.Cardinality.UNARY_UNARY,
      'getDefaultQueueName': cardinality.Cardinality.UNARY_UNARY,
      'getJobStatus': cardinality.Cardinality.UNARY_UNARY,
      'getJobStatuses': cardinality.Cardinality.UNARY_UNARY,
      'getJobs': cardinality.Cardinality.UNARY_UNARY,
      'getQueueStatus': cardinality.Cardinality.UNARY_UNARY,
      'getQueueStatuses': cardinality.Cardinality.UNARY_UNARY,
      'getQueues': cardinality.Cardinality.UNARY_UNARY,
      'getStreams': cardinality.Cardinality.STREAM_STREAM,
      'isOpen': cardinality.Cardinality.UNARY_UNARY,
      'listJobs': cardinality.Cardinality.UNARY_UNARY,
      'listSchedulers': cardinality.Cardinality.UNARY_UNARY,
      'localScheduler': cardinality.Cardinality.UNARY_UNARY,
      'newScheduler': cardinality.Cardinality.UNARY_UNARY,
      'submitJob': cardinality.Cardinality.UNARY_UNARY,
      'waitUntilDone': cardinality.Cardinality.UNARY_UNARY,
      'waitUntilRunning': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'xenon.XenonJobs', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
