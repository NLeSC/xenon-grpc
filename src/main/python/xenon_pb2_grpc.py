# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import xenon_pb2 as xenon__pb2


class XenonGlobalStub(object):
  """The functionality of the Xenon XenonFactory class
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.newXenon = channel.unary_unary(
        '/xenon.XenonGlobal/newXenon',
        request_serializer=xenon__pb2.Properties.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.getSupportedProperties = channel.unary_unary(
        '/xenon.XenonGlobal/getSupportedProperties',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.PropertyDescriptions.FromString,
        )


class XenonGlobalServicer(object):
  """The functionality of the Xenon XenonFactory class
  """

  def newXenon(self, request, context):
    """Create a new Xenon instance

    WATCH OUT!!! Must be called before calling any XenonFiles or XenonJob methods
    otherwise a Xenon instance is created without properties
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getSupportedProperties(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_XenonGlobalServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'newXenon': grpc.unary_unary_rpc_method_handler(
          servicer.newXenon,
          request_deserializer=xenon__pb2.Properties.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'getSupportedProperties': grpc.unary_unary_rpc_method_handler(
          servicer.getSupportedProperties,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.PropertyDescriptions.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.XenonGlobal', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class XenonFilesStub(object):
  """XenonFactory methods not implemented in grpc
  - endAll(), stop server to end all Xenon instances
  - end(), stop server to end all Xenon instances

  XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.XenonFiles/getAdaptorDescriptions',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.FileAdaptorDescriptions.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.XenonFiles/getAdaptorDescription',
        request_serializer=xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon__pb2.FileAdaptorDescription.FromString,
        )
    self.newFileSystem = channel.unary_unary(
        '/xenon.XenonFiles/newFileSystem',
        request_serializer=xenon__pb2.NewFileSystemRequest.SerializeToString,
        response_deserializer=xenon__pb2.FileSystem.FromString,
        )
    self.createDirectories = channel.unary_unary(
        '/xenon.XenonFiles/createDirectories',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.createDirectory = channel.unary_unary(
        '/xenon.XenonFiles/createDirectory',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.createFile = channel.unary_unary(
        '/xenon.XenonFiles/createFile',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.backgroundCopy = channel.unary_unary(
        '/xenon.XenonFiles/backgroundCopy',
        request_serializer=xenon__pb2.CopyRequest.SerializeToString,
        response_deserializer=xenon__pb2.Copy.FromString,
        )
    self.cancelBackgroundCopy = channel.unary_unary(
        '/xenon.XenonFiles/cancelBackgroundCopy',
        request_serializer=xenon__pb2.Copy.SerializeToString,
        response_deserializer=xenon__pb2.CopyStatus.FromString,
        )
    self.getBackgroundCopyStatus = channel.unary_unary(
        '/xenon.XenonFiles/getBackgroundCopyStatus',
        request_serializer=xenon__pb2.Copy.SerializeToString,
        response_deserializer=xenon__pb2.CopyStatus.FromString,
        )
    self.listBackgroundCopyStatuses = channel.unary_unary(
        '/xenon.XenonFiles/listBackgroundCopyStatuses',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.CopyStatuses.FromString,
        )
    self.deleteBackgroundCopy = channel.unary_unary(
        '/xenon.XenonFiles/deleteBackgroundCopy',
        request_serializer=xenon__pb2.Copy.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.copy = channel.unary_unary(
        '/xenon.XenonFiles/copy',
        request_serializer=xenon__pb2.CopyRequest.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.move = channel.unary_unary(
        '/xenon.XenonFiles/move',
        request_serializer=xenon__pb2.SourceTarget.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.delete = channel.unary_unary(
        '/xenon.XenonFiles/delete',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.exists = channel.unary_unary(
        '/xenon.XenonFiles/exists',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Is.FromString,
        )
    self.read = channel.unary_stream(
        '/xenon.XenonFiles/read',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.FileStream.FromString,
        )
    self.write = channel.stream_unary(
        '/xenon.XenonFiles/write',
        request_serializer=xenon__pb2.WriteRequest.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.walkFileTree = channel.unary_stream(
        '/xenon.XenonFiles/walkFileTree',
        request_serializer=xenon__pb2.WalkFileTreeRequest.SerializeToString,
        response_deserializer=xenon__pb2.PathWithAttributes.FromString,
        )
    self.getAttributes = channel.unary_unary(
        '/xenon.XenonFiles/getAttributes',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.FileAttributes.FromString,
        )
    self.setPosixFilePermissions = channel.unary_unary(
        '/xenon.XenonFiles/setPosixFilePermissions',
        request_serializer=xenon__pb2.PosixFilePermissionsRequest.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.readSymbolicLink = channel.unary_unary(
        '/xenon.XenonFiles/readSymbolicLink',
        request_serializer=xenon__pb2.Path.SerializeToString,
        response_deserializer=xenon__pb2.Path.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.XenonFiles/isOpen',
        request_serializer=xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon__pb2.Is.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.XenonFiles/close',
        request_serializer=xenon__pb2.FileSystem.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.listFileSystems = channel.unary_unary(
        '/xenon.XenonFiles/listFileSystems',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.FileSystems.FromString,
        )
    self.localFileSystems = channel.unary_unary(
        '/xenon.XenonFiles/localFileSystems',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.FileSystems.FromString,
        )


class XenonFilesServicer(object):
  """XenonFactory methods not implemented in grpc
  - endAll(), stop server to end all Xenon instances
  - end(), stop server to end all Xenon instances

  XenonFiles represents the Files interface Xenon. This interface contains various methods for creating and closing FileSystems, creating Paths and operations on these Paths.
  """

  def getAdaptorDescriptions(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def newFileSystem(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectories(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createDirectory(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def createFile(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def backgroundCopy(self, request, context):
    """Asynchronous recursive copy of files.
    in Xenon it is called copy() with CopyOption.ASYNCHRONOUS
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelBackgroundCopy(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getBackgroundCopyStatus(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listBackgroundCopyStatuses(self, request, context):
    """List currently active copy operations
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteBackgroundCopy(self, request, context):
    """Delete background copy, will also cancel when not done
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def copy(self, request, context):
    """Synchronous recursive opy
    in Xenon it is called copy() without CopyOption.ASYNCHRONOUS
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def move(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def delete(self, request, context):
    """delete a file/symlink or recursivly delete a directory
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def exists(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def read(self, request, context):
    """in Xenon it is called newInputStream()
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def write(self, request_iterator, context):
    """in Xenon it is called newOutputStream()
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def walkFileTree(self, request, context):
    """In Xenon its functonality is split into newAttributesDirectoryStream, newDirectoryStream and
    utils.walkFileTree methods.
    In Xenon a filter object or visitor object can be used, this is not possible in rpc method,
    limited filtering is offered as a regexp filter on filename.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAttributes(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setPosixFilePermissions(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def readSymbolicLink(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Closes a filestem, any actions running it with this filestystem will be terminated, will also forget the filesystem
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listFileSystems(self, request, context):
    """List currently created filesystems
    Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localFileSystems(self, request, context):
    """Returns filesystems for all local drives
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_XenonFilesServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.FileAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon__pb2.FileAdaptorDescription.SerializeToString,
      ),
      'newFileSystem': grpc.unary_unary_rpc_method_handler(
          servicer.newFileSystem,
          request_deserializer=xenon__pb2.NewFileSystemRequest.FromString,
          response_serializer=xenon__pb2.FileSystem.SerializeToString,
      ),
      'createDirectories': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectories,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'createDirectory': grpc.unary_unary_rpc_method_handler(
          servicer.createDirectory,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'createFile': grpc.unary_unary_rpc_method_handler(
          servicer.createFile,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'backgroundCopy': grpc.unary_unary_rpc_method_handler(
          servicer.backgroundCopy,
          request_deserializer=xenon__pb2.CopyRequest.FromString,
          response_serializer=xenon__pb2.Copy.SerializeToString,
      ),
      'cancelBackgroundCopy': grpc.unary_unary_rpc_method_handler(
          servicer.cancelBackgroundCopy,
          request_deserializer=xenon__pb2.Copy.FromString,
          response_serializer=xenon__pb2.CopyStatus.SerializeToString,
      ),
      'getBackgroundCopyStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getBackgroundCopyStatus,
          request_deserializer=xenon__pb2.Copy.FromString,
          response_serializer=xenon__pb2.CopyStatus.SerializeToString,
      ),
      'listBackgroundCopyStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.listBackgroundCopyStatuses,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.CopyStatuses.SerializeToString,
      ),
      'deleteBackgroundCopy': grpc.unary_unary_rpc_method_handler(
          servicer.deleteBackgroundCopy,
          request_deserializer=xenon__pb2.Copy.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'copy': grpc.unary_unary_rpc_method_handler(
          servicer.copy,
          request_deserializer=xenon__pb2.CopyRequest.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'move': grpc.unary_unary_rpc_method_handler(
          servicer.move,
          request_deserializer=xenon__pb2.SourceTarget.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'delete': grpc.unary_unary_rpc_method_handler(
          servicer.delete,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'exists': grpc.unary_unary_rpc_method_handler(
          servicer.exists,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Is.SerializeToString,
      ),
      'read': grpc.unary_stream_rpc_method_handler(
          servicer.read,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.FileStream.SerializeToString,
      ),
      'write': grpc.stream_unary_rpc_method_handler(
          servicer.write,
          request_deserializer=xenon__pb2.WriteRequest.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'walkFileTree': grpc.unary_stream_rpc_method_handler(
          servicer.walkFileTree,
          request_deserializer=xenon__pb2.WalkFileTreeRequest.FromString,
          response_serializer=xenon__pb2.PathWithAttributes.SerializeToString,
      ),
      'getAttributes': grpc.unary_unary_rpc_method_handler(
          servicer.getAttributes,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.FileAttributes.SerializeToString,
      ),
      'setPosixFilePermissions': grpc.unary_unary_rpc_method_handler(
          servicer.setPosixFilePermissions,
          request_deserializer=xenon__pb2.PosixFilePermissionsRequest.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'readSymbolicLink': grpc.unary_unary_rpc_method_handler(
          servicer.readSymbolicLink,
          request_deserializer=xenon__pb2.Path.FromString,
          response_serializer=xenon__pb2.Path.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon__pb2.FileSystem.FromString,
          response_serializer=xenon__pb2.Is.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon__pb2.FileSystem.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'listFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.listFileSystems,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.FileSystems.SerializeToString,
      ),
      'localFileSystems': grpc.unary_unary_rpc_method_handler(
          servicer.localFileSystems,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.FileSystems.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.XenonFiles', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class XenonJobsStub(object):
  """Xenon files methods not implemented in grpc
  - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
  - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
  - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

  The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getAdaptorDescriptions = channel.unary_unary(
        '/xenon.XenonJobs/getAdaptorDescriptions',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.JobAdaptorDescriptions.FromString,
        )
    self.getAdaptorDescription = channel.unary_unary(
        '/xenon.XenonJobs/getAdaptorDescription',
        request_serializer=xenon__pb2.AdaptorName.SerializeToString,
        response_deserializer=xenon__pb2.JobAdaptorDescription.FromString,
        )
    self.newScheduler = channel.unary_unary(
        '/xenon.XenonJobs/newScheduler',
        request_serializer=xenon__pb2.NewSchedulerRequest.SerializeToString,
        response_deserializer=xenon__pb2.Scheduler.FromString,
        )
    self.submitJob = channel.unary_unary(
        '/xenon.XenonJobs/submitJob',
        request_serializer=xenon__pb2.SubmitJobRequest.SerializeToString,
        response_deserializer=xenon__pb2.Job.FromString,
        )
    self.getQueues = channel.unary_unary(
        '/xenon.XenonJobs/getQueues',
        request_serializer=xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon__pb2.Queues.FromString,
        )
    self.getDefaultQueueName = channel.unary_unary(
        '/xenon.XenonJobs/getDefaultQueueName',
        request_serializer=xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon__pb2.Queue.FromString,
        )
    self.getJobs = channel.unary_unary(
        '/xenon.XenonJobs/getJobs',
        request_serializer=xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon__pb2.Jobs.FromString,
        )
    self.getJobStatus = channel.unary_unary(
        '/xenon.XenonJobs/getJobStatus',
        request_serializer=xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon__pb2.JobStatus.FromString,
        )
    self.getJobStatuses = channel.unary_unary(
        '/xenon.XenonJobs/getJobStatuses',
        request_serializer=xenon__pb2.Jobs.SerializeToString,
        response_deserializer=xenon__pb2.JobStatuses.FromString,
        )
    self.getQueueStatus = channel.unary_unary(
        '/xenon.XenonJobs/getQueueStatus',
        request_serializer=xenon__pb2.SchedulerAndQueue.SerializeToString,
        response_deserializer=xenon__pb2.QueueStatus.FromString,
        )
    self.getQueueStatuses = channel.unary_unary(
        '/xenon.XenonJobs/getQueueStatuses',
        request_serializer=xenon__pb2.SchedulerAndQueues.SerializeToString,
        response_deserializer=xenon__pb2.QueueStatuses.FromString,
        )
    self.waitUntilDone = channel.unary_unary(
        '/xenon.XenonJobs/waitUntilDone',
        request_serializer=xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon__pb2.JobStatus.FromString,
        )
    self.waitUntilRunning = channel.unary_unary(
        '/xenon.XenonJobs/waitUntilRunning',
        request_serializer=xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon__pb2.JobStatus.FromString,
        )
    self.getStreams = channel.stream_stream(
        '/xenon.XenonJobs/getStreams',
        request_serializer=xenon__pb2.JobInputStream.SerializeToString,
        response_deserializer=xenon__pb2.JobOutputStreams.FromString,
        )
    self.isOpen = channel.unary_unary(
        '/xenon.XenonJobs/isOpen',
        request_serializer=xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon__pb2.Is.FromString,
        )
    self.cancelJob = channel.unary_unary(
        '/xenon.XenonJobs/cancelJob',
        request_serializer=xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon__pb2.JobStatus.FromString,
        )
    self.deleteJob = channel.unary_unary(
        '/xenon.XenonJobs/deleteJob',
        request_serializer=xenon__pb2.Job.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.close = channel.unary_unary(
        '/xenon.XenonJobs/close',
        request_serializer=xenon__pb2.Scheduler.SerializeToString,
        response_deserializer=xenon__pb2.Empty.FromString,
        )
    self.listSchedulers = channel.unary_unary(
        '/xenon.XenonJobs/listSchedulers',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.Schedulers.FromString,
        )
    self.listJobs = channel.unary_unary(
        '/xenon.XenonJobs/listJobs',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.Jobs.FromString,
        )
    self.localScheduler = channel.unary_unary(
        '/xenon.XenonJobs/localScheduler',
        request_serializer=xenon__pb2.Empty.SerializeToString,
        response_deserializer=xenon__pb2.Scheduler.FromString,
        )


class XenonJobsServicer(object):
  """Xenon files methods not implemented in grpc
  - newAttributesDirectoryStream with filter, filter is a lambda function which can not be used in rpc
  - newDirectoryStream with filter, filter is a lambda function which can not be used in rpc
  - newPath, a Xenon Path is contructed by FileSystem + RelativePath, in grpc the message Path has FileSystem + RelativePath, making the Xenon Path hidden from the grpc API

  The Jobs API of Xenon. This interface creates various methods for creating and closing Schedulers, submitting jobs, and retrieving information about schedulers and jobs.
  """

  def getAdaptorDescriptions(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getAdaptorDescription(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def newScheduler(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submitJob(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueues(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getDefaultQueueName(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobs(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatus(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getJobStatuses(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatus(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getQueueStatuses(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilDone(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitUntilRunning(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getStreams(self, request_iterator, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isOpen(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelJob(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteJob(self, request, context):
    """Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def close(self, request, context):
    """Close scheduler and forget it
    If scheduler is online then any jobs pending/running will become invalid
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listSchedulers(self, request, context):
    """Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listJobs(self, request, context):
    """Specific to grpc, not part of Xenon library
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def localScheduler(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_XenonJobsServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getAdaptorDescriptions': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescriptions,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.JobAdaptorDescriptions.SerializeToString,
      ),
      'getAdaptorDescription': grpc.unary_unary_rpc_method_handler(
          servicer.getAdaptorDescription,
          request_deserializer=xenon__pb2.AdaptorName.FromString,
          response_serializer=xenon__pb2.JobAdaptorDescription.SerializeToString,
      ),
      'newScheduler': grpc.unary_unary_rpc_method_handler(
          servicer.newScheduler,
          request_deserializer=xenon__pb2.NewSchedulerRequest.FromString,
          response_serializer=xenon__pb2.Scheduler.SerializeToString,
      ),
      'submitJob': grpc.unary_unary_rpc_method_handler(
          servicer.submitJob,
          request_deserializer=xenon__pb2.SubmitJobRequest.FromString,
          response_serializer=xenon__pb2.Job.SerializeToString,
      ),
      'getQueues': grpc.unary_unary_rpc_method_handler(
          servicer.getQueues,
          request_deserializer=xenon__pb2.Scheduler.FromString,
          response_serializer=xenon__pb2.Queues.SerializeToString,
      ),
      'getDefaultQueueName': grpc.unary_unary_rpc_method_handler(
          servicer.getDefaultQueueName,
          request_deserializer=xenon__pb2.Scheduler.FromString,
          response_serializer=xenon__pb2.Queue.SerializeToString,
      ),
      'getJobs': grpc.unary_unary_rpc_method_handler(
          servicer.getJobs,
          request_deserializer=xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon__pb2.Jobs.SerializeToString,
      ),
      'getJobStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatus,
          request_deserializer=xenon__pb2.Job.FromString,
          response_serializer=xenon__pb2.JobStatus.SerializeToString,
      ),
      'getJobStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getJobStatuses,
          request_deserializer=xenon__pb2.Jobs.FromString,
          response_serializer=xenon__pb2.JobStatuses.SerializeToString,
      ),
      'getQueueStatus': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatus,
          request_deserializer=xenon__pb2.SchedulerAndQueue.FromString,
          response_serializer=xenon__pb2.QueueStatus.SerializeToString,
      ),
      'getQueueStatuses': grpc.unary_unary_rpc_method_handler(
          servicer.getQueueStatuses,
          request_deserializer=xenon__pb2.SchedulerAndQueues.FromString,
          response_serializer=xenon__pb2.QueueStatuses.SerializeToString,
      ),
      'waitUntilDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilDone,
          request_deserializer=xenon__pb2.Job.FromString,
          response_serializer=xenon__pb2.JobStatus.SerializeToString,
      ),
      'waitUntilRunning': grpc.unary_unary_rpc_method_handler(
          servicer.waitUntilRunning,
          request_deserializer=xenon__pb2.Job.FromString,
          response_serializer=xenon__pb2.JobStatus.SerializeToString,
      ),
      'getStreams': grpc.stream_stream_rpc_method_handler(
          servicer.getStreams,
          request_deserializer=xenon__pb2.JobInputStream.FromString,
          response_serializer=xenon__pb2.JobOutputStreams.SerializeToString,
      ),
      'isOpen': grpc.unary_unary_rpc_method_handler(
          servicer.isOpen,
          request_deserializer=xenon__pb2.Scheduler.FromString,
          response_serializer=xenon__pb2.Is.SerializeToString,
      ),
      'cancelJob': grpc.unary_unary_rpc_method_handler(
          servicer.cancelJob,
          request_deserializer=xenon__pb2.Job.FromString,
          response_serializer=xenon__pb2.JobStatus.SerializeToString,
      ),
      'deleteJob': grpc.unary_unary_rpc_method_handler(
          servicer.deleteJob,
          request_deserializer=xenon__pb2.Job.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'close': grpc.unary_unary_rpc_method_handler(
          servicer.close,
          request_deserializer=xenon__pb2.Scheduler.FromString,
          response_serializer=xenon__pb2.Empty.SerializeToString,
      ),
      'listSchedulers': grpc.unary_unary_rpc_method_handler(
          servicer.listSchedulers,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.Schedulers.SerializeToString,
      ),
      'listJobs': grpc.unary_unary_rpc_method_handler(
          servicer.listJobs,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.Jobs.SerializeToString,
      ),
      'localScheduler': grpc.unary_unary_rpc_method_handler(
          servicer.localScheduler,
          request_deserializer=xenon__pb2.Empty.FromString,
          response_serializer=xenon__pb2.Scheduler.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xenon.XenonJobs', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
